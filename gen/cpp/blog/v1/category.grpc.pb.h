// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blog/v1/category.proto
#ifndef GRPC_blog_2fv1_2fcategory_2eproto__INCLUDED
#define GRPC_blog_2fv1_2fcategory_2eproto__INCLUDED

#include "blog/v1/category.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace blog {
namespace v1 {

class CategoryService final {
 public:
  static constexpr char const* service_full_name() {
    return "blog.v1.CategoryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::blog::v1::CreateCategoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateCategoryResponse>> AsyncCreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateCategoryResponse>>(AsyncCreateCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateCategoryResponse>> PrepareAsyncCreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateCategoryResponse>>(PrepareAsyncCreateCategoryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::blog::v1::GetCategoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetCategoryResponse>> AsyncGetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetCategoryResponse>>(AsyncGetCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetCategoryResponse>> PrepareAsyncGetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetCategoryResponse>>(PrepareAsyncGetCategoryRaw(context, request, cq));
    }
    virtual ::grpc::Status ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::blog::v1::ListCategoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListCategoryResponse>> AsyncListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListCategoryResponse>>(AsyncListCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListCategoryResponse>> PrepareAsyncListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListCategoryResponse>>(PrepareAsyncListCategoryRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::blog::v1::UpdateCategoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateCategoryResponse>> AsyncUpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateCategoryResponse>>(AsyncUpdateCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateCategoryResponse>> PrepareAsyncUpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateCategoryResponse>>(PrepareAsyncUpdateCategoryRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::blog::v1::DeleteCategoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteCategoryResponse>> AsyncDeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteCategoryResponse>>(AsyncDeleteCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteCategoryResponse>> PrepareAsyncDeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteCategoryResponse>>(PrepareAsyncDeleteCategoryRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateCategoryResponse>* AsyncCreateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateCategoryResponse>* PrepareAsyncCreateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetCategoryResponse>* AsyncGetCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetCategoryResponse>* PrepareAsyncGetCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListCategoryResponse>* AsyncListCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListCategoryResponse>* PrepareAsyncListCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateCategoryResponse>* AsyncUpdateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateCategoryResponse>* PrepareAsyncUpdateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteCategoryResponse>* AsyncDeleteCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteCategoryResponse>* PrepareAsyncDeleteCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::blog::v1::CreateCategoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateCategoryResponse>> AsyncCreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateCategoryResponse>>(AsyncCreateCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateCategoryResponse>> PrepareAsyncCreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateCategoryResponse>>(PrepareAsyncCreateCategoryRaw(context, request, cq));
    }
    ::grpc::Status GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::blog::v1::GetCategoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetCategoryResponse>> AsyncGetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetCategoryResponse>>(AsyncGetCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetCategoryResponse>> PrepareAsyncGetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetCategoryResponse>>(PrepareAsyncGetCategoryRaw(context, request, cq));
    }
    ::grpc::Status ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::blog::v1::ListCategoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListCategoryResponse>> AsyncListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListCategoryResponse>>(AsyncListCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListCategoryResponse>> PrepareAsyncListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListCategoryResponse>>(PrepareAsyncListCategoryRaw(context, request, cq));
    }
    ::grpc::Status UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::blog::v1::UpdateCategoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateCategoryResponse>> AsyncUpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateCategoryResponse>>(AsyncUpdateCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateCategoryResponse>> PrepareAsyncUpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateCategoryResponse>>(PrepareAsyncUpdateCategoryRaw(context, request, cq));
    }
    ::grpc::Status DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::blog::v1::DeleteCategoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteCategoryResponse>> AsyncDeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteCategoryResponse>>(AsyncDeleteCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteCategoryResponse>> PrepareAsyncDeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteCategoryResponse>>(PrepareAsyncDeleteCategoryRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateCategoryResponse>* AsyncCreateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateCategoryResponse>* PrepareAsyncCreateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::GetCategoryResponse>* AsyncGetCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::GetCategoryResponse>* PrepareAsyncGetCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::ListCategoryResponse>* AsyncListCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::ListCategoryResponse>* PrepareAsyncListCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateCategoryResponse>* AsyncUpdateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateCategoryResponse>* PrepareAsyncUpdateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteCategoryResponse>* AsyncDeleteCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteCategoryResponse>* PrepareAsyncDeleteCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCategory_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCategory_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCategory_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCategory_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCategory_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateCategory(::grpc::ServerContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response);
    virtual ::grpc::Status GetCategory(::grpc::ServerContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response);
    virtual ::grpc::Status ListCategory(::grpc::ServerContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response);
    virtual ::grpc::Status UpdateCategory(::grpc::ServerContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response);
    virtual ::grpc::Status DeleteCategory(::grpc::ServerContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCategory() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateCategoryRequest* /*request*/, ::blog::v1::CreateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCategory(::grpc::ServerContext* context, ::blog::v1::CreateCategoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::CreateCategoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCategory() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::GetCategoryRequest* /*request*/, ::blog::v1::GetCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCategory(::grpc::ServerContext* context, ::blog::v1::GetCategoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::GetCategoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCategory() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::ListCategoryRequest* /*request*/, ::blog::v1::ListCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCategory(::grpc::ServerContext* context, ::blog::v1::ListCategoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::ListCategoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCategory() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateCategoryRequest* /*request*/, ::blog::v1::UpdateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCategory(::grpc::ServerContext* context, ::blog::v1::UpdateCategoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::UpdateCategoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCategory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteCategoryRequest* /*request*/, ::blog::v1::DeleteCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCategory(::grpc::ServerContext* context, ::blog::v1::DeleteCategoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::DeleteCategoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateCategory<WithAsyncMethod_GetCategory<WithAsyncMethod_ListCategory<WithAsyncMethod_UpdateCategory<WithAsyncMethod_DeleteCategory<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCategory() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::CreateCategoryRequest, ::blog::v1::CreateCategoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response) { return this->CreateCategory(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCategory(
        ::grpc::MessageAllocator< ::blog::v1::CreateCategoryRequest, ::blog::v1::CreateCategoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::CreateCategoryRequest, ::blog::v1::CreateCategoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateCategoryRequest* /*request*/, ::blog::v1::CreateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::CreateCategoryRequest* /*request*/, ::blog::v1::CreateCategoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCategory() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::GetCategoryRequest, ::blog::v1::GetCategoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response) { return this->GetCategory(context, request, response); }));}
    void SetMessageAllocatorFor_GetCategory(
        ::grpc::MessageAllocator< ::blog::v1::GetCategoryRequest, ::blog::v1::GetCategoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::GetCategoryRequest, ::blog::v1::GetCategoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::GetCategoryRequest* /*request*/, ::blog::v1::GetCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::GetCategoryRequest* /*request*/, ::blog::v1::GetCategoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCategory() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::ListCategoryRequest, ::blog::v1::ListCategoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response) { return this->ListCategory(context, request, response); }));}
    void SetMessageAllocatorFor_ListCategory(
        ::grpc::MessageAllocator< ::blog::v1::ListCategoryRequest, ::blog::v1::ListCategoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::ListCategoryRequest, ::blog::v1::ListCategoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::ListCategoryRequest* /*request*/, ::blog::v1::ListCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::ListCategoryRequest* /*request*/, ::blog::v1::ListCategoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateCategory() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::UpdateCategoryRequest, ::blog::v1::UpdateCategoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response) { return this->UpdateCategory(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCategory(
        ::grpc::MessageAllocator< ::blog::v1::UpdateCategoryRequest, ::blog::v1::UpdateCategoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::UpdateCategoryRequest, ::blog::v1::UpdateCategoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateCategoryRequest* /*request*/, ::blog::v1::UpdateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::UpdateCategoryRequest* /*request*/, ::blog::v1::UpdateCategoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCategory() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::DeleteCategoryRequest, ::blog::v1::DeleteCategoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response) { return this->DeleteCategory(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCategory(
        ::grpc::MessageAllocator< ::blog::v1::DeleteCategoryRequest, ::blog::v1::DeleteCategoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::DeleteCategoryRequest, ::blog::v1::DeleteCategoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteCategoryRequest* /*request*/, ::blog::v1::DeleteCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::DeleteCategoryRequest* /*request*/, ::blog::v1::DeleteCategoryResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateCategory<WithCallbackMethod_GetCategory<WithCallbackMethod_ListCategory<WithCallbackMethod_UpdateCategory<WithCallbackMethod_DeleteCategory<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCategory() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateCategoryRequest* /*request*/, ::blog::v1::CreateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCategory() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::GetCategoryRequest* /*request*/, ::blog::v1::GetCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCategory() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::ListCategoryRequest* /*request*/, ::blog::v1::ListCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCategory() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateCategoryRequest* /*request*/, ::blog::v1::UpdateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCategory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteCategoryRequest* /*request*/, ::blog::v1::DeleteCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCategory() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateCategoryRequest* /*request*/, ::blog::v1::CreateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCategory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCategory() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::GetCategoryRequest* /*request*/, ::blog::v1::GetCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCategory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCategory() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::ListCategoryRequest* /*request*/, ::blog::v1::ListCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCategory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCategory() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateCategoryRequest* /*request*/, ::blog::v1::UpdateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCategory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCategory() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteCategoryRequest* /*request*/, ::blog::v1::DeleteCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCategory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCategory() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCategory(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateCategoryRequest* /*request*/, ::blog::v1::CreateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCategory() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCategory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::GetCategoryRequest* /*request*/, ::blog::v1::GetCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCategory() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCategory(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::ListCategoryRequest* /*request*/, ::blog::v1::ListCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateCategory() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCategory(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateCategoryRequest* /*request*/, ::blog::v1::UpdateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCategory() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCategory(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteCategoryRequest* /*request*/, ::blog::v1::DeleteCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCategory() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::CreateCategoryRequest, ::blog::v1::CreateCategoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::CreateCategoryRequest, ::blog::v1::CreateCategoryResponse>* streamer) {
                       return this->StreamedCreateCategory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateCategoryRequest* /*request*/, ::blog::v1::CreateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCategory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::CreateCategoryRequest,::blog::v1::CreateCategoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCategory() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::GetCategoryRequest, ::blog::v1::GetCategoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::GetCategoryRequest, ::blog::v1::GetCategoryResponse>* streamer) {
                       return this->StreamedGetCategory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::GetCategoryRequest* /*request*/, ::blog::v1::GetCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCategory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::GetCategoryRequest,::blog::v1::GetCategoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCategory() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::ListCategoryRequest, ::blog::v1::ListCategoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::ListCategoryRequest, ::blog::v1::ListCategoryResponse>* streamer) {
                       return this->StreamedListCategory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::ListCategoryRequest* /*request*/, ::blog::v1::ListCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCategory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::ListCategoryRequest,::blog::v1::ListCategoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCategory() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::UpdateCategoryRequest, ::blog::v1::UpdateCategoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::UpdateCategoryRequest, ::blog::v1::UpdateCategoryResponse>* streamer) {
                       return this->StreamedUpdateCategory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateCategoryRequest* /*request*/, ::blog::v1::UpdateCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCategory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::UpdateCategoryRequest,::blog::v1::UpdateCategoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCategory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::DeleteCategoryRequest, ::blog::v1::DeleteCategoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::DeleteCategoryRequest, ::blog::v1::DeleteCategoryResponse>* streamer) {
                       return this->StreamedDeleteCategory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCategory(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteCategoryRequest* /*request*/, ::blog::v1::DeleteCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCategory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::DeleteCategoryRequest,::blog::v1::DeleteCategoryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateCategory<WithStreamedUnaryMethod_GetCategory<WithStreamedUnaryMethod_ListCategory<WithStreamedUnaryMethod_UpdateCategory<WithStreamedUnaryMethod_DeleteCategory<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateCategory<WithStreamedUnaryMethod_GetCategory<WithStreamedUnaryMethod_ListCategory<WithStreamedUnaryMethod_UpdateCategory<WithStreamedUnaryMethod_DeleteCategory<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace blog


#endif  // GRPC_blog_2fv1_2fcategory_2eproto__INCLUDED
