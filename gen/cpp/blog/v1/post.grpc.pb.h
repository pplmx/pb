// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blog/v1/post.proto
#ifndef GRPC_blog_2fv1_2fpost_2eproto__INCLUDED
#define GRPC_blog_2fv1_2fpost_2eproto__INCLUDED

#include "blog/v1/post.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace blog {
namespace v1 {

class PostService final {
 public:
  static constexpr char const* service_full_name() {
    return "blog.v1.PostService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::blog::v1::CreatePostResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreatePostResponse>> AsyncCreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreatePostResponse>>(AsyncCreatePostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreatePostResponse>> PrepareAsyncCreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreatePostResponse>>(PrepareAsyncCreatePostRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::blog::v1::GetPostByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetPostByIDResponse>> AsyncGetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetPostByIDResponse>>(AsyncGetPostByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetPostByIDResponse>> PrepareAsyncGetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetPostByIDResponse>>(PrepareAsyncGetPostByIDRaw(context, request, cq));
    }
    virtual ::grpc::Status ListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::blog::v1::ListPostsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListPostsResponse>> AsyncListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListPostsResponse>>(AsyncListPostsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListPostsResponse>> PrepareAsyncListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListPostsResponse>>(PrepareAsyncListPostsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::blog::v1::UpdatePostResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdatePostResponse>> AsyncUpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdatePostResponse>>(AsyncUpdatePostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdatePostResponse>> PrepareAsyncUpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdatePostResponse>>(PrepareAsyncUpdatePostRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::blog::v1::DeletePostResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeletePostResponse>> AsyncDeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeletePostResponse>>(AsyncDeletePostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeletePostResponse>> PrepareAsyncDeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeletePostResponse>>(PrepareAsyncDeletePostRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest* request, ::blog::v1::CreatePostResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest* request, ::blog::v1::CreatePostResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest* request, ::blog::v1::GetPostByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest* request, ::blog::v1::GetPostByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest* request, ::blog::v1::ListPostsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest* request, ::blog::v1::ListPostsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest* request, ::blog::v1::UpdatePostResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest* request, ::blog::v1::UpdatePostResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest* request, ::blog::v1::DeletePostResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest* request, ::blog::v1::DeletePostResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreatePostResponse>* AsyncCreatePostRaw(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreatePostResponse>* PrepareAsyncCreatePostRaw(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetPostByIDResponse>* AsyncGetPostByIDRaw(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetPostByIDResponse>* PrepareAsyncGetPostByIDRaw(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListPostsResponse>* AsyncListPostsRaw(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListPostsResponse>* PrepareAsyncListPostsRaw(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdatePostResponse>* AsyncUpdatePostRaw(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdatePostResponse>* PrepareAsyncUpdatePostRaw(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeletePostResponse>* AsyncDeletePostRaw(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeletePostResponse>* PrepareAsyncDeletePostRaw(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::blog::v1::CreatePostResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreatePostResponse>> AsyncCreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreatePostResponse>>(AsyncCreatePostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreatePostResponse>> PrepareAsyncCreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreatePostResponse>>(PrepareAsyncCreatePostRaw(context, request, cq));
    }
    ::grpc::Status GetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::blog::v1::GetPostByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetPostByIDResponse>> AsyncGetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetPostByIDResponse>>(AsyncGetPostByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetPostByIDResponse>> PrepareAsyncGetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetPostByIDResponse>>(PrepareAsyncGetPostByIDRaw(context, request, cq));
    }
    ::grpc::Status ListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::blog::v1::ListPostsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListPostsResponse>> AsyncListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListPostsResponse>>(AsyncListPostsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListPostsResponse>> PrepareAsyncListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListPostsResponse>>(PrepareAsyncListPostsRaw(context, request, cq));
    }
    ::grpc::Status UpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::blog::v1::UpdatePostResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdatePostResponse>> AsyncUpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdatePostResponse>>(AsyncUpdatePostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdatePostResponse>> PrepareAsyncUpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdatePostResponse>>(PrepareAsyncUpdatePostRaw(context, request, cq));
    }
    ::grpc::Status DeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::blog::v1::DeletePostResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeletePostResponse>> AsyncDeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeletePostResponse>>(AsyncDeletePostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeletePostResponse>> PrepareAsyncDeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeletePostResponse>>(PrepareAsyncDeletePostRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest* request, ::blog::v1::CreatePostResponse* response, std::function<void(::grpc::Status)>) override;
      void CreatePost(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest* request, ::blog::v1::CreatePostResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest* request, ::blog::v1::GetPostByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPostByID(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest* request, ::blog::v1::GetPostByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest* request, ::blog::v1::ListPostsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListPosts(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest* request, ::blog::v1::ListPostsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest* request, ::blog::v1::UpdatePostResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdatePost(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest* request, ::blog::v1::UpdatePostResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest* request, ::blog::v1::DeletePostResponse* response, std::function<void(::grpc::Status)>) override;
      void DeletePost(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest* request, ::blog::v1::DeletePostResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::blog::v1::CreatePostResponse>* AsyncCreatePostRaw(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::CreatePostResponse>* PrepareAsyncCreatePostRaw(::grpc::ClientContext* context, const ::blog::v1::CreatePostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::GetPostByIDResponse>* AsyncGetPostByIDRaw(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::GetPostByIDResponse>* PrepareAsyncGetPostByIDRaw(::grpc::ClientContext* context, const ::blog::v1::GetPostByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::ListPostsResponse>* AsyncListPostsRaw(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::ListPostsResponse>* PrepareAsyncListPostsRaw(::grpc::ClientContext* context, const ::blog::v1::ListPostsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdatePostResponse>* AsyncUpdatePostRaw(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdatePostResponse>* PrepareAsyncUpdatePostRaw(::grpc::ClientContext* context, const ::blog::v1::UpdatePostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::DeletePostResponse>* AsyncDeletePostRaw(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::DeletePostResponse>* PrepareAsyncDeletePostRaw(::grpc::ClientContext* context, const ::blog::v1::DeletePostRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePost_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPostByID_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPosts_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePost_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePost_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreatePost(::grpc::ServerContext* context, const ::blog::v1::CreatePostRequest* request, ::blog::v1::CreatePostResponse* response);
    virtual ::grpc::Status GetPostByID(::grpc::ServerContext* context, const ::blog::v1::GetPostByIDRequest* request, ::blog::v1::GetPostByIDResponse* response);
    virtual ::grpc::Status ListPosts(::grpc::ServerContext* context, const ::blog::v1::ListPostsRequest* request, ::blog::v1::ListPostsResponse* response);
    virtual ::grpc::Status UpdatePost(::grpc::ServerContext* context, const ::blog::v1::UpdatePostRequest* request, ::blog::v1::UpdatePostResponse* response);
    virtual ::grpc::Status DeletePost(::grpc::ServerContext* context, const ::blog::v1::DeletePostRequest* request, ::blog::v1::DeletePostResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePost() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::CreatePostRequest* /*request*/, ::blog::v1::CreatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePost(::grpc::ServerContext* context, ::blog::v1::CreatePostRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::CreatePostResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPostByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPostByID() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPostByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostByID(::grpc::ServerContext* /*context*/, const ::blog::v1::GetPostByIDRequest* /*request*/, ::blog::v1::GetPostByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPostByID(::grpc::ServerContext* context, ::blog::v1::GetPostByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::GetPostByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPosts() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListPosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPosts(::grpc::ServerContext* /*context*/, const ::blog::v1::ListPostsRequest* /*request*/, ::blog::v1::ListPostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPosts(::grpc::ServerContext* context, ::blog::v1::ListPostsRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::ListPostsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePost() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdatePostRequest* /*request*/, ::blog::v1::UpdatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePost(::grpc::ServerContext* context, ::blog::v1::UpdatePostRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::UpdatePostResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePost() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeletePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePost(::grpc::ServerContext* /*context*/, const ::blog::v1::DeletePostRequest* /*request*/, ::blog::v1::DeletePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePost(::grpc::ServerContext* context, ::blog::v1::DeletePostRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::DeletePostResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreatePost<WithAsyncMethod_GetPostByID<WithAsyncMethod_ListPosts<WithAsyncMethod_UpdatePost<WithAsyncMethod_DeletePost<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePost() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::CreatePostRequest, ::blog::v1::CreatePostResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::CreatePostRequest* request, ::blog::v1::CreatePostResponse* response) { return this->CreatePost(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePost(
        ::grpc::MessageAllocator< ::blog::v1::CreatePostRequest, ::blog::v1::CreatePostResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::CreatePostRequest, ::blog::v1::CreatePostResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::CreatePostRequest* /*request*/, ::blog::v1::CreatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePost(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::CreatePostRequest* /*request*/, ::blog::v1::CreatePostResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPostByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPostByID() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::GetPostByIDRequest, ::blog::v1::GetPostByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::GetPostByIDRequest* request, ::blog::v1::GetPostByIDResponse* response) { return this->GetPostByID(context, request, response); }));}
    void SetMessageAllocatorFor_GetPostByID(
        ::grpc::MessageAllocator< ::blog::v1::GetPostByIDRequest, ::blog::v1::GetPostByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::GetPostByIDRequest, ::blog::v1::GetPostByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPostByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostByID(::grpc::ServerContext* /*context*/, const ::blog::v1::GetPostByIDRequest* /*request*/, ::blog::v1::GetPostByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPostByID(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::GetPostByIDRequest* /*request*/, ::blog::v1::GetPostByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListPosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListPosts() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::ListPostsRequest, ::blog::v1::ListPostsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::ListPostsRequest* request, ::blog::v1::ListPostsResponse* response) { return this->ListPosts(context, request, response); }));}
    void SetMessageAllocatorFor_ListPosts(
        ::grpc::MessageAllocator< ::blog::v1::ListPostsRequest, ::blog::v1::ListPostsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::ListPostsRequest, ::blog::v1::ListPostsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListPosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPosts(::grpc::ServerContext* /*context*/, const ::blog::v1::ListPostsRequest* /*request*/, ::blog::v1::ListPostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPosts(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::ListPostsRequest* /*request*/, ::blog::v1::ListPostsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdatePost() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::UpdatePostRequest, ::blog::v1::UpdatePostResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::UpdatePostRequest* request, ::blog::v1::UpdatePostResponse* response) { return this->UpdatePost(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePost(
        ::grpc::MessageAllocator< ::blog::v1::UpdatePostRequest, ::blog::v1::UpdatePostResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::UpdatePostRequest, ::blog::v1::UpdatePostResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdatePostRequest* /*request*/, ::blog::v1::UpdatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePost(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::UpdatePostRequest* /*request*/, ::blog::v1::UpdatePostResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePost() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::DeletePostRequest, ::blog::v1::DeletePostResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::DeletePostRequest* request, ::blog::v1::DeletePostResponse* response) { return this->DeletePost(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePost(
        ::grpc::MessageAllocator< ::blog::v1::DeletePostRequest, ::blog::v1::DeletePostResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::DeletePostRequest, ::blog::v1::DeletePostResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePost(::grpc::ServerContext* /*context*/, const ::blog::v1::DeletePostRequest* /*request*/, ::blog::v1::DeletePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePost(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::DeletePostRequest* /*request*/, ::blog::v1::DeletePostResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreatePost<WithCallbackMethod_GetPostByID<WithCallbackMethod_ListPosts<WithCallbackMethod_UpdatePost<WithCallbackMethod_DeletePost<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePost() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::CreatePostRequest* /*request*/, ::blog::v1::CreatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPostByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPostByID() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPostByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostByID(::grpc::ServerContext* /*context*/, const ::blog::v1::GetPostByIDRequest* /*request*/, ::blog::v1::GetPostByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPosts() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListPosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPosts(::grpc::ServerContext* /*context*/, const ::blog::v1::ListPostsRequest* /*request*/, ::blog::v1::ListPostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePost() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdatePostRequest* /*request*/, ::blog::v1::UpdatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePost() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeletePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePost(::grpc::ServerContext* /*context*/, const ::blog::v1::DeletePostRequest* /*request*/, ::blog::v1::DeletePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePost() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::CreatePostRequest* /*request*/, ::blog::v1::CreatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPostByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPostByID() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPostByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostByID(::grpc::ServerContext* /*context*/, const ::blog::v1::GetPostByIDRequest* /*request*/, ::blog::v1::GetPostByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPostByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPosts() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListPosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPosts(::grpc::ServerContext* /*context*/, const ::blog::v1::ListPostsRequest* /*request*/, ::blog::v1::ListPostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPosts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePost() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdatePostRequest* /*request*/, ::blog::v1::UpdatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePost() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeletePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePost(::grpc::ServerContext* /*context*/, const ::blog::v1::DeletePostRequest* /*request*/, ::blog::v1::DeletePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePost() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePost(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::CreatePostRequest* /*request*/, ::blog::v1::CreatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPostByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPostByID() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPostByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPostByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostByID(::grpc::ServerContext* /*context*/, const ::blog::v1::GetPostByIDRequest* /*request*/, ::blog::v1::GetPostByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPostByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListPosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListPosts() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPosts(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListPosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPosts(::grpc::ServerContext* /*context*/, const ::blog::v1::ListPostsRequest* /*request*/, ::blog::v1::ListPostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPosts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdatePost() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePost(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdatePostRequest* /*request*/, ::blog::v1::UpdatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePost() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePost(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePost(::grpc::ServerContext* /*context*/, const ::blog::v1::DeletePostRequest* /*request*/, ::blog::v1::DeletePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePost() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::CreatePostRequest, ::blog::v1::CreatePostResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::CreatePostRequest, ::blog::v1::CreatePostResponse>* streamer) {
                       return this->StreamedCreatePost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::CreatePostRequest* /*request*/, ::blog::v1::CreatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::CreatePostRequest,::blog::v1::CreatePostResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPostByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPostByID() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::GetPostByIDRequest, ::blog::v1::GetPostByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::GetPostByIDRequest, ::blog::v1::GetPostByIDResponse>* streamer) {
                       return this->StreamedGetPostByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPostByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPostByID(::grpc::ServerContext* /*context*/, const ::blog::v1::GetPostByIDRequest* /*request*/, ::blog::v1::GetPostByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPostByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::GetPostByIDRequest,::blog::v1::GetPostByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPosts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPosts() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::ListPostsRequest, ::blog::v1::ListPostsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::ListPostsRequest, ::blog::v1::ListPostsResponse>* streamer) {
                       return this->StreamedListPosts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPosts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPosts(::grpc::ServerContext* /*context*/, const ::blog::v1::ListPostsRequest* /*request*/, ::blog::v1::ListPostsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPosts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::ListPostsRequest,::blog::v1::ListPostsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePost() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::UpdatePostRequest, ::blog::v1::UpdatePostResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::UpdatePostRequest, ::blog::v1::UpdatePostResponse>* streamer) {
                       return this->StreamedUpdatePost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePost(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdatePostRequest* /*request*/, ::blog::v1::UpdatePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::UpdatePostRequest,::blog::v1::UpdatePostResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePost() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::DeletePostRequest, ::blog::v1::DeletePostResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::DeletePostRequest, ::blog::v1::DeletePostResponse>* streamer) {
                       return this->StreamedDeletePost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePost(::grpc::ServerContext* /*context*/, const ::blog::v1::DeletePostRequest* /*request*/, ::blog::v1::DeletePostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::DeletePostRequest,::blog::v1::DeletePostResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreatePost<WithStreamedUnaryMethod_GetPostByID<WithStreamedUnaryMethod_ListPosts<WithStreamedUnaryMethod_UpdatePost<WithStreamedUnaryMethod_DeletePost<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreatePost<WithStreamedUnaryMethod_GetPostByID<WithStreamedUnaryMethod_ListPosts<WithStreamedUnaryMethod_UpdatePost<WithStreamedUnaryMethod_DeletePost<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace blog


#endif  // GRPC_blog_2fv1_2fpost_2eproto__INCLUDED
