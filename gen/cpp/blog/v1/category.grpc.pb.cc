// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blog/v1/category.proto

#include "blog/v1/category.pb.h"
#include "blog/v1/category.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace blog {
namespace v1 {

static const char* CategoryService_method_names[] = {
  "/blog.v1.CategoryService/CreateCategory",
  "/blog.v1.CategoryService/GetCategory",
  "/blog.v1.CategoryService/ListCategory",
  "/blog.v1.CategoryService/UpdateCategory",
  "/blog.v1.CategoryService/DeleteCategory",
};

std::unique_ptr< CategoryService::Stub> CategoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CategoryService::Stub> stub(new CategoryService::Stub(channel, options));
  return stub;
}

CategoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateCategory_(CategoryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCategory_(CategoryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCategory_(CategoryService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCategory_(CategoryService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCategory_(CategoryService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CategoryService::Stub::CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::blog::v1::CreateCategoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::blog::v1::CreateCategoryRequest, ::blog::v1::CreateCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCategory_, context, request, response);
}

void CategoryService::Stub::async::CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::blog::v1::CreateCategoryRequest, ::blog::v1::CreateCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCategory_, context, request, response, std::move(f));
}

void CategoryService::Stub::async::CreateCategory(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::CreateCategoryResponse>* CategoryService::Stub::PrepareAsyncCreateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::blog::v1::CreateCategoryResponse, ::blog::v1::CreateCategoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::CreateCategoryResponse>* CategoryService::Stub::AsyncCreateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::CreateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CategoryService::Stub::GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::blog::v1::GetCategoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::blog::v1::GetCategoryRequest, ::blog::v1::GetCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCategory_, context, request, response);
}

void CategoryService::Stub::async::GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::blog::v1::GetCategoryRequest, ::blog::v1::GetCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCategory_, context, request, response, std::move(f));
}

void CategoryService::Stub::async::GetCategory(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::GetCategoryResponse>* CategoryService::Stub::PrepareAsyncGetCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::blog::v1::GetCategoryResponse, ::blog::v1::GetCategoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::GetCategoryResponse>* CategoryService::Stub::AsyncGetCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::GetCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CategoryService::Stub::ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::blog::v1::ListCategoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::blog::v1::ListCategoryRequest, ::blog::v1::ListCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListCategory_, context, request, response);
}

void CategoryService::Stub::async::ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::blog::v1::ListCategoryRequest, ::blog::v1::ListCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCategory_, context, request, response, std::move(f));
}

void CategoryService::Stub::async::ListCategory(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::ListCategoryResponse>* CategoryService::Stub::PrepareAsyncListCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::blog::v1::ListCategoryResponse, ::blog::v1::ListCategoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::ListCategoryResponse>* CategoryService::Stub::AsyncListCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::ListCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CategoryService::Stub::UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::blog::v1::UpdateCategoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::blog::v1::UpdateCategoryRequest, ::blog::v1::UpdateCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCategory_, context, request, response);
}

void CategoryService::Stub::async::UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::blog::v1::UpdateCategoryRequest, ::blog::v1::UpdateCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCategory_, context, request, response, std::move(f));
}

void CategoryService::Stub::async::UpdateCategory(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateCategoryResponse>* CategoryService::Stub::PrepareAsyncUpdateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::blog::v1::UpdateCategoryResponse, ::blog::v1::UpdateCategoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateCategoryResponse>* CategoryService::Stub::AsyncUpdateCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CategoryService::Stub::DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::blog::v1::DeleteCategoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::blog::v1::DeleteCategoryRequest, ::blog::v1::DeleteCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCategory_, context, request, response);
}

void CategoryService::Stub::async::DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::blog::v1::DeleteCategoryRequest, ::blog::v1::DeleteCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCategory_, context, request, response, std::move(f));
}

void CategoryService::Stub::async::DeleteCategory(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteCategoryResponse>* CategoryService::Stub::PrepareAsyncDeleteCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::blog::v1::DeleteCategoryResponse, ::blog::v1::DeleteCategoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteCategoryResponse>* CategoryService::Stub::AsyncDeleteCategoryRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

CategoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CategoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CategoryService::Service, ::blog::v1::CreateCategoryRequest, ::blog::v1::CreateCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CategoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::blog::v1::CreateCategoryRequest* req,
             ::blog::v1::CreateCategoryResponse* resp) {
               return service->CreateCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CategoryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CategoryService::Service, ::blog::v1::GetCategoryRequest, ::blog::v1::GetCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CategoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::blog::v1::GetCategoryRequest* req,
             ::blog::v1::GetCategoryResponse* resp) {
               return service->GetCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CategoryService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CategoryService::Service, ::blog::v1::ListCategoryRequest, ::blog::v1::ListCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CategoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::blog::v1::ListCategoryRequest* req,
             ::blog::v1::ListCategoryResponse* resp) {
               return service->ListCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CategoryService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CategoryService::Service, ::blog::v1::UpdateCategoryRequest, ::blog::v1::UpdateCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CategoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::blog::v1::UpdateCategoryRequest* req,
             ::blog::v1::UpdateCategoryResponse* resp) {
               return service->UpdateCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CategoryService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CategoryService::Service, ::blog::v1::DeleteCategoryRequest, ::blog::v1::DeleteCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CategoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::blog::v1::DeleteCategoryRequest* req,
             ::blog::v1::DeleteCategoryResponse* resp) {
               return service->DeleteCategory(ctx, req, resp);
             }, this)));
}

CategoryService::Service::~Service() {
}

::grpc::Status CategoryService::Service::CreateCategory(::grpc::ServerContext* context, const ::blog::v1::CreateCategoryRequest* request, ::blog::v1::CreateCategoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CategoryService::Service::GetCategory(::grpc::ServerContext* context, const ::blog::v1::GetCategoryRequest* request, ::blog::v1::GetCategoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CategoryService::Service::ListCategory(::grpc::ServerContext* context, const ::blog::v1::ListCategoryRequest* request, ::blog::v1::ListCategoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CategoryService::Service::UpdateCategory(::grpc::ServerContext* context, const ::blog::v1::UpdateCategoryRequest* request, ::blog::v1::UpdateCategoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CategoryService::Service::DeleteCategory(::grpc::ServerContext* context, const ::blog::v1::DeleteCategoryRequest* request, ::blog::v1::DeleteCategoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace blog
}  // namespace v1

