// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blog/v1/tag.proto
#ifndef GRPC_blog_2fv1_2ftag_2eproto__INCLUDED
#define GRPC_blog_2fv1_2ftag_2eproto__INCLUDED

#include "blog/v1/tag.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace blog {
namespace v1 {

class TagService final {
 public:
  static constexpr char const* service_full_name() {
    return "blog.v1.TagService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::blog::v1::CreateTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateTagResponse>> AsyncCreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateTagResponse>>(AsyncCreateTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateTagResponse>> PrepareAsyncCreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateTagResponse>>(PrepareAsyncCreateTagRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::blog::v1::GetTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetTagResponse>> AsyncGetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetTagResponse>>(AsyncGetTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetTagResponse>> PrepareAsyncGetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetTagResponse>>(PrepareAsyncGetTagRaw(context, request, cq));
    }
    virtual ::grpc::Status ListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::blog::v1::ListTagsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListTagsResponse>> AsyncListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListTagsResponse>>(AsyncListTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListTagsResponse>> PrepareAsyncListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListTagsResponse>>(PrepareAsyncListTagsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::blog::v1::UpdateTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateTagResponse>> AsyncUpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateTagResponse>>(AsyncUpdateTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateTagResponse>> PrepareAsyncUpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateTagResponse>>(PrepareAsyncUpdateTagRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::blog::v1::DeleteTagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteTagResponse>> AsyncDeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteTagResponse>>(AsyncDeleteTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteTagResponse>> PrepareAsyncDeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteTagResponse>>(PrepareAsyncDeleteTagRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest* request, ::blog::v1::CreateTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest* request, ::blog::v1::CreateTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest* request, ::blog::v1::GetTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest* request, ::blog::v1::GetTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest* request, ::blog::v1::ListTagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest* request, ::blog::v1::ListTagsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest* request, ::blog::v1::UpdateTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest* request, ::blog::v1::UpdateTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest* request, ::blog::v1::DeleteTagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest* request, ::blog::v1::DeleteTagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateTagResponse>* AsyncCreateTagRaw(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::CreateTagResponse>* PrepareAsyncCreateTagRaw(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetTagResponse>* AsyncGetTagRaw(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::GetTagResponse>* PrepareAsyncGetTagRaw(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListTagsResponse>* AsyncListTagsRaw(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::ListTagsResponse>* PrepareAsyncListTagsRaw(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateTagResponse>* AsyncUpdateTagRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::UpdateTagResponse>* PrepareAsyncUpdateTagRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteTagResponse>* AsyncDeleteTagRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blog::v1::DeleteTagResponse>* PrepareAsyncDeleteTagRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::blog::v1::CreateTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateTagResponse>> AsyncCreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateTagResponse>>(AsyncCreateTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateTagResponse>> PrepareAsyncCreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateTagResponse>>(PrepareAsyncCreateTagRaw(context, request, cq));
    }
    ::grpc::Status GetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::blog::v1::GetTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetTagResponse>> AsyncGetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetTagResponse>>(AsyncGetTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetTagResponse>> PrepareAsyncGetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::GetTagResponse>>(PrepareAsyncGetTagRaw(context, request, cq));
    }
    ::grpc::Status ListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::blog::v1::ListTagsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListTagsResponse>> AsyncListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListTagsResponse>>(AsyncListTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListTagsResponse>> PrepareAsyncListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::ListTagsResponse>>(PrepareAsyncListTagsRaw(context, request, cq));
    }
    ::grpc::Status UpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::blog::v1::UpdateTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateTagResponse>> AsyncUpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateTagResponse>>(AsyncUpdateTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateTagResponse>> PrepareAsyncUpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateTagResponse>>(PrepareAsyncUpdateTagRaw(context, request, cq));
    }
    ::grpc::Status DeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::blog::v1::DeleteTagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteTagResponse>> AsyncDeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteTagResponse>>(AsyncDeleteTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteTagResponse>> PrepareAsyncDeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteTagResponse>>(PrepareAsyncDeleteTagRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest* request, ::blog::v1::CreateTagResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateTag(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest* request, ::blog::v1::CreateTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest* request, ::blog::v1::GetTagResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTag(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest* request, ::blog::v1::GetTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest* request, ::blog::v1::ListTagsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTags(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest* request, ::blog::v1::ListTagsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest* request, ::blog::v1::UpdateTagResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateTag(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest* request, ::blog::v1::UpdateTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest* request, ::blog::v1::DeleteTagResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteTag(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest* request, ::blog::v1::DeleteTagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateTagResponse>* AsyncCreateTagRaw(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::CreateTagResponse>* PrepareAsyncCreateTagRaw(::grpc::ClientContext* context, const ::blog::v1::CreateTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::GetTagResponse>* AsyncGetTagRaw(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::GetTagResponse>* PrepareAsyncGetTagRaw(::grpc::ClientContext* context, const ::blog::v1::GetTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::ListTagsResponse>* AsyncListTagsRaw(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::ListTagsResponse>* PrepareAsyncListTagsRaw(::grpc::ClientContext* context, const ::blog::v1::ListTagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateTagResponse>* AsyncUpdateTagRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::UpdateTagResponse>* PrepareAsyncUpdateTagRaw(::grpc::ClientContext* context, const ::blog::v1::UpdateTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteTagResponse>* AsyncDeleteTagRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blog::v1::DeleteTagResponse>* PrepareAsyncDeleteTagRaw(::grpc::ClientContext* context, const ::blog::v1::DeleteTagRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTag_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTag_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTags_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTag_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTag_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateTag(::grpc::ServerContext* context, const ::blog::v1::CreateTagRequest* request, ::blog::v1::CreateTagResponse* response);
    virtual ::grpc::Status GetTag(::grpc::ServerContext* context, const ::blog::v1::GetTagRequest* request, ::blog::v1::GetTagResponse* response);
    virtual ::grpc::Status ListTags(::grpc::ServerContext* context, const ::blog::v1::ListTagsRequest* request, ::blog::v1::ListTagsResponse* response);
    virtual ::grpc::Status UpdateTag(::grpc::ServerContext* context, const ::blog::v1::UpdateTagRequest* request, ::blog::v1::UpdateTagResponse* response);
    virtual ::grpc::Status DeleteTag(::grpc::ServerContext* context, const ::blog::v1::DeleteTagRequest* request, ::blog::v1::DeleteTagResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTag() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateTagRequest* /*request*/, ::blog::v1::CreateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTag(::grpc::ServerContext* context, ::blog::v1::CreateTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::CreateTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTag() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTag(::grpc::ServerContext* /*context*/, const ::blog::v1::GetTagRequest* /*request*/, ::blog::v1::GetTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTag(::grpc::ServerContext* context, ::blog::v1::GetTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::GetTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTags() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTags(::grpc::ServerContext* /*context*/, const ::blog::v1::ListTagsRequest* /*request*/, ::blog::v1::ListTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTags(::grpc::ServerContext* context, ::blog::v1::ListTagsRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::ListTagsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTag() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateTagRequest* /*request*/, ::blog::v1::UpdateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTag(::grpc::ServerContext* context, ::blog::v1::UpdateTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::UpdateTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTag() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTag(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteTagRequest* /*request*/, ::blog::v1::DeleteTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTag(::grpc::ServerContext* context, ::blog::v1::DeleteTagRequest* request, ::grpc::ServerAsyncResponseWriter< ::blog::v1::DeleteTagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateTag<WithAsyncMethod_GetTag<WithAsyncMethod_ListTags<WithAsyncMethod_UpdateTag<WithAsyncMethod_DeleteTag<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTag() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::CreateTagRequest, ::blog::v1::CreateTagResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::CreateTagRequest* request, ::blog::v1::CreateTagResponse* response) { return this->CreateTag(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTag(
        ::grpc::MessageAllocator< ::blog::v1::CreateTagRequest, ::blog::v1::CreateTagResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::CreateTagRequest, ::blog::v1::CreateTagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateTagRequest* /*request*/, ::blog::v1::CreateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTag(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::CreateTagRequest* /*request*/, ::blog::v1::CreateTagResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTag() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::GetTagRequest, ::blog::v1::GetTagResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::GetTagRequest* request, ::blog::v1::GetTagResponse* response) { return this->GetTag(context, request, response); }));}
    void SetMessageAllocatorFor_GetTag(
        ::grpc::MessageAllocator< ::blog::v1::GetTagRequest, ::blog::v1::GetTagResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::GetTagRequest, ::blog::v1::GetTagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTag(::grpc::ServerContext* /*context*/, const ::blog::v1::GetTagRequest* /*request*/, ::blog::v1::GetTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTag(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::GetTagRequest* /*request*/, ::blog::v1::GetTagResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTags() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::ListTagsRequest, ::blog::v1::ListTagsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::ListTagsRequest* request, ::blog::v1::ListTagsResponse* response) { return this->ListTags(context, request, response); }));}
    void SetMessageAllocatorFor_ListTags(
        ::grpc::MessageAllocator< ::blog::v1::ListTagsRequest, ::blog::v1::ListTagsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::ListTagsRequest, ::blog::v1::ListTagsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTags(::grpc::ServerContext* /*context*/, const ::blog::v1::ListTagsRequest* /*request*/, ::blog::v1::ListTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTags(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::ListTagsRequest* /*request*/, ::blog::v1::ListTagsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateTag() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::UpdateTagRequest, ::blog::v1::UpdateTagResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::UpdateTagRequest* request, ::blog::v1::UpdateTagResponse* response) { return this->UpdateTag(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTag(
        ::grpc::MessageAllocator< ::blog::v1::UpdateTagRequest, ::blog::v1::UpdateTagResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::UpdateTagRequest, ::blog::v1::UpdateTagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateTagRequest* /*request*/, ::blog::v1::UpdateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTag(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::UpdateTagRequest* /*request*/, ::blog::v1::UpdateTagResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteTag() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::blog::v1::DeleteTagRequest, ::blog::v1::DeleteTagResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blog::v1::DeleteTagRequest* request, ::blog::v1::DeleteTagResponse* response) { return this->DeleteTag(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTag(
        ::grpc::MessageAllocator< ::blog::v1::DeleteTagRequest, ::blog::v1::DeleteTagResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blog::v1::DeleteTagRequest, ::blog::v1::DeleteTagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTag(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteTagRequest* /*request*/, ::blog::v1::DeleteTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTag(
      ::grpc::CallbackServerContext* /*context*/, const ::blog::v1::DeleteTagRequest* /*request*/, ::blog::v1::DeleteTagResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateTag<WithCallbackMethod_GetTag<WithCallbackMethod_ListTags<WithCallbackMethod_UpdateTag<WithCallbackMethod_DeleteTag<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTag() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateTagRequest* /*request*/, ::blog::v1::CreateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTag() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTag(::grpc::ServerContext* /*context*/, const ::blog::v1::GetTagRequest* /*request*/, ::blog::v1::GetTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTags() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTags(::grpc::ServerContext* /*context*/, const ::blog::v1::ListTagsRequest* /*request*/, ::blog::v1::ListTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTag() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateTagRequest* /*request*/, ::blog::v1::UpdateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTag() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTag(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteTagRequest* /*request*/, ::blog::v1::DeleteTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTag() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateTagRequest* /*request*/, ::blog::v1::CreateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTag() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTag(::grpc::ServerContext* /*context*/, const ::blog::v1::GetTagRequest* /*request*/, ::blog::v1::GetTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTags() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTags(::grpc::ServerContext* /*context*/, const ::blog::v1::ListTagsRequest* /*request*/, ::blog::v1::ListTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTags(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTag() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateTagRequest* /*request*/, ::blog::v1::UpdateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTag() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTag(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteTagRequest* /*request*/, ::blog::v1::DeleteTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTag() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTag(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateTagRequest* /*request*/, ::blog::v1::CreateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTag() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTag(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTag(::grpc::ServerContext* /*context*/, const ::blog::v1::GetTagRequest* /*request*/, ::blog::v1::GetTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTags() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTags(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTags(::grpc::ServerContext* /*context*/, const ::blog::v1::ListTagsRequest* /*request*/, ::blog::v1::ListTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTags(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateTag() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTag(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateTagRequest* /*request*/, ::blog::v1::UpdateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteTag() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTag(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTag(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteTagRequest* /*request*/, ::blog::v1::DeleteTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTag() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::CreateTagRequest, ::blog::v1::CreateTagResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::CreateTagRequest, ::blog::v1::CreateTagResponse>* streamer) {
                       return this->StreamedCreateTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::CreateTagRequest* /*request*/, ::blog::v1::CreateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::CreateTagRequest,::blog::v1::CreateTagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTag() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::GetTagRequest, ::blog::v1::GetTagResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::GetTagRequest, ::blog::v1::GetTagResponse>* streamer) {
                       return this->StreamedGetTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTag(::grpc::ServerContext* /*context*/, const ::blog::v1::GetTagRequest* /*request*/, ::blog::v1::GetTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::GetTagRequest,::blog::v1::GetTagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTags() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::ListTagsRequest, ::blog::v1::ListTagsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::ListTagsRequest, ::blog::v1::ListTagsResponse>* streamer) {
                       return this->StreamedListTags(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTags(::grpc::ServerContext* /*context*/, const ::blog::v1::ListTagsRequest* /*request*/, ::blog::v1::ListTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTags(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::ListTagsRequest,::blog::v1::ListTagsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTag() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::UpdateTagRequest, ::blog::v1::UpdateTagResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::UpdateTagRequest, ::blog::v1::UpdateTagResponse>* streamer) {
                       return this->StreamedUpdateTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTag(::grpc::ServerContext* /*context*/, const ::blog::v1::UpdateTagRequest* /*request*/, ::blog::v1::UpdateTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::UpdateTagRequest,::blog::v1::UpdateTagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTag() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blog::v1::DeleteTagRequest, ::blog::v1::DeleteTagResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blog::v1::DeleteTagRequest, ::blog::v1::DeleteTagResponse>* streamer) {
                       return this->StreamedDeleteTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTag(::grpc::ServerContext* /*context*/, const ::blog::v1::DeleteTagRequest* /*request*/, ::blog::v1::DeleteTagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blog::v1::DeleteTagRequest,::blog::v1::DeleteTagResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateTag<WithStreamedUnaryMethod_GetTag<WithStreamedUnaryMethod_ListTags<WithStreamedUnaryMethod_UpdateTag<WithStreamedUnaryMethod_DeleteTag<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateTag<WithStreamedUnaryMethod_GetTag<WithStreamedUnaryMethod_ListTags<WithStreamedUnaryMethod_UpdateTag<WithStreamedUnaryMethod_DeleteTag<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace blog


#endif  // GRPC_blog_2fv1_2ftag_2eproto__INCLUDED
