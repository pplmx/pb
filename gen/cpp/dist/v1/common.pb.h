// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dist/v1/common.proto
// Protobuf C++ Version: 5.29.0

#ifndef dist_2fv1_2fcommon_2eproto_2epb_2eh
#define dist_2fv1_2fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dist_2fv1_2fcommon_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dist_2fv1_2fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_dist_2fv1_2fcommon_2eproto;
namespace dist {
namespace v1 {
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeStatusChangeEvent;
struct NodeStatusChangeEventDefaultTypeInternal;
extern NodeStatusChangeEventDefaultTypeInternal _NodeStatusChangeEvent_default_instance_;
class ShutdownEvent;
struct ShutdownEventDefaultTypeInternal;
extern ShutdownEventDefaultTypeInternal _ShutdownEvent_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskAssignmentEvent;
struct TaskAssignmentEventDefaultTypeInternal;
extern TaskAssignmentEventDefaultTypeInternal _TaskAssignmentEvent_default_instance_;
class TaskStatusChangeEvent;
struct TaskStatusChangeEventDefaultTypeInternal;
extern TaskStatusChangeEventDefaultTypeInternal _TaskStatusChangeEvent_default_instance_;
}  // namespace v1
}  // namespace dist
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dist {
namespace v1 {
enum Node_NodeStatus : int {
  Node_NodeStatus_NODE_STATUS_UNSPECIFIED = 0,
  Node_NodeStatus_NODE_STATUS_ACTIVE = 1,
  Node_NodeStatus_NODE_STATUS_INACTIVE = 2,
  Node_NodeStatus_NODE_STATUS_OVERLOADED = 3,
  Node_NodeStatus_Node_NodeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Node_NodeStatus_Node_NodeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Node_NodeStatus_IsValid(int value);
extern const uint32_t Node_NodeStatus_internal_data_[];
constexpr Node_NodeStatus Node_NodeStatus_NodeStatus_MIN = static_cast<Node_NodeStatus>(0);
constexpr Node_NodeStatus Node_NodeStatus_NodeStatus_MAX = static_cast<Node_NodeStatus>(3);
constexpr int Node_NodeStatus_NodeStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Node_NodeStatus_descriptor();
template <typename T>
const std::string& Node_NodeStatus_Name(T value) {
  static_assert(std::is_same<T, Node_NodeStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NodeStatus_Name().");
  return Node_NodeStatus_Name(static_cast<Node_NodeStatus>(value));
}
template <>
inline const std::string& Node_NodeStatus_Name(Node_NodeStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Node_NodeStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Node_NodeStatus_Parse(absl::string_view name, Node_NodeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Node_NodeStatus>(
      Node_NodeStatus_descriptor(), name, value);
}
enum Task_TaskType : int {
  Task_TaskType_TASK_TYPE_UNSPECIFIED = 0,
  Task_TaskType_TASK_TYPE_COMPUTE = 1,
  Task_TaskType_TASK_TYPE_DATA_PROCESSING = 2,
  Task_TaskType_TASK_TYPE_MACHINE_LEARNING = 3,
  Task_TaskType_Task_TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Task_TaskType_Task_TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Task_TaskType_IsValid(int value);
extern const uint32_t Task_TaskType_internal_data_[];
constexpr Task_TaskType Task_TaskType_TaskType_MIN = static_cast<Task_TaskType>(0);
constexpr Task_TaskType Task_TaskType_TaskType_MAX = static_cast<Task_TaskType>(3);
constexpr int Task_TaskType_TaskType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Task_TaskType_descriptor();
template <typename T>
const std::string& Task_TaskType_Name(T value) {
  static_assert(std::is_same<T, Task_TaskType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TaskType_Name().");
  return Task_TaskType_Name(static_cast<Task_TaskType>(value));
}
template <>
inline const std::string& Task_TaskType_Name(Task_TaskType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Task_TaskType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Task_TaskType_Parse(absl::string_view name, Task_TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_TaskType>(
      Task_TaskType_descriptor(), name, value);
}
enum Task_TaskStatus : int {
  Task_TaskStatus_TASK_STATUS_UNSPECIFIED = 0,
  Task_TaskStatus_TASK_STATUS_PENDING = 1,
  Task_TaskStatus_TASK_STATUS_RUNNING = 2,
  Task_TaskStatus_TASK_STATUS_COMPLETED = 3,
  Task_TaskStatus_TASK_STATUS_FAILED = 4,
  Task_TaskStatus_TASK_STATUS_CANCELED = 5,
  Task_TaskStatus_Task_TaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Task_TaskStatus_Task_TaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Task_TaskStatus_IsValid(int value);
extern const uint32_t Task_TaskStatus_internal_data_[];
constexpr Task_TaskStatus Task_TaskStatus_TaskStatus_MIN = static_cast<Task_TaskStatus>(0);
constexpr Task_TaskStatus Task_TaskStatus_TaskStatus_MAX = static_cast<Task_TaskStatus>(5);
constexpr int Task_TaskStatus_TaskStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Task_TaskStatus_descriptor();
template <typename T>
const std::string& Task_TaskStatus_Name(T value) {
  static_assert(std::is_same<T, Task_TaskStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TaskStatus_Name().");
  return Task_TaskStatus_Name(static_cast<Task_TaskStatus>(value));
}
template <>
inline const std::string& Task_TaskStatus_Name(Task_TaskStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Task_TaskStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Task_TaskStatus_Parse(absl::string_view name, Task_TaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_TaskStatus>(
      Task_TaskStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Task final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Task* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Task));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Task(
      ::google::protobuf::internal::ConstantInitialized);

  inline Task(const Task& from) : Task(nullptr, from) {}
  inline Task(Task&& from) noexcept
      : Task(nullptr, std::move(from)) {}
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
        &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Task& a, Task& b) { a.Swap(&b); }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Task>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Task& from) { Task::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Task* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.Task"; }

 protected:
  explicit Task(::google::protobuf::Arena* arena);
  Task(::google::protobuf::Arena* arena, const Task& from);
  Task(::google::protobuf::Arena* arena, Task&& from) noexcept
      : Task(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using TaskType = Task_TaskType;
  static constexpr TaskType TASK_TYPE_UNSPECIFIED = Task_TaskType_TASK_TYPE_UNSPECIFIED;
  static constexpr TaskType TASK_TYPE_COMPUTE = Task_TaskType_TASK_TYPE_COMPUTE;
  static constexpr TaskType TASK_TYPE_DATA_PROCESSING = Task_TaskType_TASK_TYPE_DATA_PROCESSING;
  static constexpr TaskType TASK_TYPE_MACHINE_LEARNING = Task_TaskType_TASK_TYPE_MACHINE_LEARNING;
  static inline bool TaskType_IsValid(int value) {
    return Task_TaskType_IsValid(value);
  }
  static constexpr TaskType TaskType_MIN = Task_TaskType_TaskType_MIN;
  static constexpr TaskType TaskType_MAX = Task_TaskType_TaskType_MAX;
  static constexpr int TaskType_ARRAYSIZE = Task_TaskType_TaskType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
    return Task_TaskType_descriptor();
  }
  template <typename T>
  static inline const std::string& TaskType_Name(T value) {
    return Task_TaskType_Name(value);
  }
  static inline bool TaskType_Parse(absl::string_view name, TaskType* value) {
    return Task_TaskType_Parse(name, value);
  }
  using TaskStatus = Task_TaskStatus;
  static constexpr TaskStatus TASK_STATUS_UNSPECIFIED = Task_TaskStatus_TASK_STATUS_UNSPECIFIED;
  static constexpr TaskStatus TASK_STATUS_PENDING = Task_TaskStatus_TASK_STATUS_PENDING;
  static constexpr TaskStatus TASK_STATUS_RUNNING = Task_TaskStatus_TASK_STATUS_RUNNING;
  static constexpr TaskStatus TASK_STATUS_COMPLETED = Task_TaskStatus_TASK_STATUS_COMPLETED;
  static constexpr TaskStatus TASK_STATUS_FAILED = Task_TaskStatus_TASK_STATUS_FAILED;
  static constexpr TaskStatus TASK_STATUS_CANCELED = Task_TaskStatus_TASK_STATUS_CANCELED;
  static inline bool TaskStatus_IsValid(int value) {
    return Task_TaskStatus_IsValid(value);
  }
  static constexpr TaskStatus TaskStatus_MIN = Task_TaskStatus_TaskStatus_MIN;
  static constexpr TaskStatus TaskStatus_MAX = Task_TaskStatus_TaskStatus_MAX;
  static constexpr int TaskStatus_ARRAYSIZE = Task_TaskStatus_TaskStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TaskStatus_descriptor() {
    return Task_TaskStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& TaskStatus_Name(T value) {
    return Task_TaskStatus_Name(value);
  }
  static inline bool TaskStatus_Parse(absl::string_view name, TaskStatus* value) {
    return Task_TaskStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kPayloadFieldNumber = 5,
    kTypeFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes payload = 5 [json_name = "payload"];
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // .dist.v1.Task.TaskType type = 3 [json_name = "type"];
  void clear_type() ;
  ::dist::v1::Task_TaskType type() const;
  void set_type(::dist::v1::Task_TaskType value);

  private:
  ::dist::v1::Task_TaskType _internal_type() const;
  void _internal_set_type(::dist::v1::Task_TaskType value);

  public:
  // .dist.v1.Task.TaskStatus status = 4 [json_name = "status"];
  void clear_status() ;
  ::dist::v1::Task_TaskStatus status() const;
  void set_status(::dist::v1::Task_TaskStatus value);

  private:
  ::dist::v1::Task_TaskStatus _internal_status() const;
  void _internal_set_status(::dist::v1::Task_TaskStatus value);

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.Task)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Task& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    int type_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ShutdownEvent final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.ShutdownEvent) */ {
 public:
  inline ShutdownEvent() : ShutdownEvent(nullptr) {}
  ~ShutdownEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShutdownEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShutdownEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShutdownEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShutdownEvent(const ShutdownEvent& from) : ShutdownEvent(nullptr, from) {}
  inline ShutdownEvent(ShutdownEvent&& from) noexcept
      : ShutdownEvent(nullptr, std::move(from)) {}
  inline ShutdownEvent& operator=(const ShutdownEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownEvent& operator=(ShutdownEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutdownEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutdownEvent* internal_default_instance() {
    return reinterpret_cast<const ShutdownEvent*>(
        &_ShutdownEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ShutdownEvent& a, ShutdownEvent& b) { a.Swap(&b); }
  inline void Swap(ShutdownEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShutdownEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ShutdownEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShutdownEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ShutdownEvent& from) { ShutdownEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ShutdownEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.ShutdownEvent"; }

 protected:
  explicit ShutdownEvent(::google::protobuf::Arena* arena);
  ShutdownEvent(::google::protobuf::Arena* arena, const ShutdownEvent& from);
  ShutdownEvent(::google::protobuf::Arena* arena, ShutdownEvent&& from) noexcept
      : ShutdownEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // string node_id = 1 [json_name = "nodeId"];
  void clear_node_id() ;
  const std::string& node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* value);

  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(
      const std::string& value);
  std::string* _internal_mutable_node_id();

  public:
  // string reason = 2 [json_name = "reason"];
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.ShutdownEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShutdownEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_id_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Node final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Node* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Node));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Node(
      ::google::protobuf::internal::ConstantInitialized);

  inline Node(const Node& from) : Node(nullptr, from) {}
  inline Node(Node&& from) noexcept
      : Node(nullptr, std::move(from)) {}
  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
        &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Node& a, Node& b) { a.Swap(&b); }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Node>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Node& from) { Node::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Node* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.Node"; }

 protected:
  explicit Node(::google::protobuf::Arena* arena);
  Node(::google::protobuf::Arena* arena, const Node& from);
  Node(::google::protobuf::Arena* arena, Node&& from) noexcept
      : Node(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using NodeStatus = Node_NodeStatus;
  static constexpr NodeStatus NODE_STATUS_UNSPECIFIED = Node_NodeStatus_NODE_STATUS_UNSPECIFIED;
  static constexpr NodeStatus NODE_STATUS_ACTIVE = Node_NodeStatus_NODE_STATUS_ACTIVE;
  static constexpr NodeStatus NODE_STATUS_INACTIVE = Node_NodeStatus_NODE_STATUS_INACTIVE;
  static constexpr NodeStatus NODE_STATUS_OVERLOADED = Node_NodeStatus_NODE_STATUS_OVERLOADED;
  static inline bool NodeStatus_IsValid(int value) {
    return Node_NodeStatus_IsValid(value);
  }
  static constexpr NodeStatus NodeStatus_MIN = Node_NodeStatus_NodeStatus_MIN;
  static constexpr NodeStatus NodeStatus_MAX = Node_NodeStatus_NodeStatus_MAX;
  static constexpr int NodeStatus_ARRAYSIZE = Node_NodeStatus_NodeStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NodeStatus_descriptor() {
    return Node_NodeStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& NodeStatus_Name(T value) {
    return Node_NodeStatus_Name(value);
  }
  static inline bool NodeStatus_Parse(absl::string_view name, NodeStatus* value) {
    return Node_NodeStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAddressFieldNumber = 3,
    kPortFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string address = 3 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint32 port = 4 [json_name = "port"];
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // .dist.v1.Node.NodeStatus status = 5 [json_name = "status"];
  void clear_status() ;
  ::dist::v1::Node_NodeStatus status() const;
  void set_status(::dist::v1::Node_NodeStatus value);

  private:
  ::dist::v1::Node_NodeStatus _internal_status() const;
  void _internal_set_status(::dist::v1::Node_NodeStatus value);

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.Node)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Node& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::uint32_t port_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class TaskStatusChangeEvent final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.TaskStatusChangeEvent) */ {
 public:
  inline TaskStatusChangeEvent() : TaskStatusChangeEvent(nullptr) {}
  ~TaskStatusChangeEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskStatusChangeEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskStatusChangeEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskStatusChangeEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskStatusChangeEvent(const TaskStatusChangeEvent& from) : TaskStatusChangeEvent(nullptr, from) {}
  inline TaskStatusChangeEvent(TaskStatusChangeEvent&& from) noexcept
      : TaskStatusChangeEvent(nullptr, std::move(from)) {}
  inline TaskStatusChangeEvent& operator=(const TaskStatusChangeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStatusChangeEvent& operator=(TaskStatusChangeEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskStatusChangeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStatusChangeEvent* internal_default_instance() {
    return reinterpret_cast<const TaskStatusChangeEvent*>(
        &_TaskStatusChangeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TaskStatusChangeEvent& a, TaskStatusChangeEvent& b) { a.Swap(&b); }
  inline void Swap(TaskStatusChangeEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStatusChangeEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskStatusChangeEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskStatusChangeEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskStatusChangeEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskStatusChangeEvent& from) { TaskStatusChangeEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskStatusChangeEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.TaskStatusChangeEvent"; }

 protected:
  explicit TaskStatusChangeEvent(::google::protobuf::Arena* arena);
  TaskStatusChangeEvent(::google::protobuf::Arena* arena, const TaskStatusChangeEvent& from);
  TaskStatusChangeEvent(::google::protobuf::Arena* arena, TaskStatusChangeEvent&& from) noexcept
      : TaskStatusChangeEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskFieldNumber = 1,
    kPreviousStatusFieldNumber = 2,
    kCurrentStatusFieldNumber = 3,
  };
  // .dist.v1.Task task = 1 [json_name = "task"];
  bool has_task() const;
  void clear_task() ;
  const ::dist::v1::Task& task() const;
  PROTOBUF_NODISCARD ::dist::v1::Task* release_task();
  ::dist::v1::Task* mutable_task();
  void set_allocated_task(::dist::v1::Task* value);
  void unsafe_arena_set_allocated_task(::dist::v1::Task* value);
  ::dist::v1::Task* unsafe_arena_release_task();

  private:
  const ::dist::v1::Task& _internal_task() const;
  ::dist::v1::Task* _internal_mutable_task();

  public:
  // .dist.v1.Task.TaskStatus previous_status = 2 [json_name = "previousStatus"];
  void clear_previous_status() ;
  ::dist::v1::Task_TaskStatus previous_status() const;
  void set_previous_status(::dist::v1::Task_TaskStatus value);

  private:
  ::dist::v1::Task_TaskStatus _internal_previous_status() const;
  void _internal_set_previous_status(::dist::v1::Task_TaskStatus value);

  public:
  // .dist.v1.Task.TaskStatus current_status = 3 [json_name = "currentStatus"];
  void clear_current_status() ;
  ::dist::v1::Task_TaskStatus current_status() const;
  void set_current_status(::dist::v1::Task_TaskStatus value);

  private:
  ::dist::v1::Task_TaskStatus _internal_current_status() const;
  void _internal_set_current_status(::dist::v1::Task_TaskStatus value);

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.TaskStatusChangeEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskStatusChangeEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::dist::v1::Task* task_;
    int previous_status_;
    int current_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class TaskAssignmentEvent final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.TaskAssignmentEvent) */ {
 public:
  inline TaskAssignmentEvent() : TaskAssignmentEvent(nullptr) {}
  ~TaskAssignmentEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskAssignmentEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskAssignmentEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskAssignmentEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskAssignmentEvent(const TaskAssignmentEvent& from) : TaskAssignmentEvent(nullptr, from) {}
  inline TaskAssignmentEvent(TaskAssignmentEvent&& from) noexcept
      : TaskAssignmentEvent(nullptr, std::move(from)) {}
  inline TaskAssignmentEvent& operator=(const TaskAssignmentEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskAssignmentEvent& operator=(TaskAssignmentEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskAssignmentEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskAssignmentEvent* internal_default_instance() {
    return reinterpret_cast<const TaskAssignmentEvent*>(
        &_TaskAssignmentEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TaskAssignmentEvent& a, TaskAssignmentEvent& b) { a.Swap(&b); }
  inline void Swap(TaskAssignmentEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskAssignmentEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskAssignmentEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskAssignmentEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskAssignmentEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskAssignmentEvent& from) { TaskAssignmentEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskAssignmentEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.TaskAssignmentEvent"; }

 protected:
  explicit TaskAssignmentEvent(::google::protobuf::Arena* arena);
  TaskAssignmentEvent(::google::protobuf::Arena* arena, const TaskAssignmentEvent& from);
  TaskAssignmentEvent(::google::protobuf::Arena* arena, TaskAssignmentEvent&& from) noexcept
      : TaskAssignmentEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAssignedNodeIdFieldNumber = 2,
    kTaskFieldNumber = 1,
  };
  // string assigned_node_id = 2 [json_name = "assignedNodeId"];
  void clear_assigned_node_id() ;
  const std::string& assigned_node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_assigned_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_assigned_node_id();
  PROTOBUF_NODISCARD std::string* release_assigned_node_id();
  void set_allocated_assigned_node_id(std::string* value);

  private:
  const std::string& _internal_assigned_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assigned_node_id(
      const std::string& value);
  std::string* _internal_mutable_assigned_node_id();

  public:
  // .dist.v1.Task task = 1 [json_name = "task"];
  bool has_task() const;
  void clear_task() ;
  const ::dist::v1::Task& task() const;
  PROTOBUF_NODISCARD ::dist::v1::Task* release_task();
  ::dist::v1::Task* mutable_task();
  void set_allocated_task(::dist::v1::Task* value);
  void unsafe_arena_set_allocated_task(::dist::v1::Task* value);
  ::dist::v1::Task* unsafe_arena_release_task();

  private:
  const ::dist::v1::Task& _internal_task() const;
  ::dist::v1::Task* _internal_mutable_task();

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.TaskAssignmentEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskAssignmentEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr assigned_node_id_;
    ::dist::v1::Task* task_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NodeStatusChangeEvent final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.NodeStatusChangeEvent) */ {
 public:
  inline NodeStatusChangeEvent() : NodeStatusChangeEvent(nullptr) {}
  ~NodeStatusChangeEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NodeStatusChangeEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NodeStatusChangeEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeStatusChangeEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeStatusChangeEvent(const NodeStatusChangeEvent& from) : NodeStatusChangeEvent(nullptr, from) {}
  inline NodeStatusChangeEvent(NodeStatusChangeEvent&& from) noexcept
      : NodeStatusChangeEvent(nullptr, std::move(from)) {}
  inline NodeStatusChangeEvent& operator=(const NodeStatusChangeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStatusChangeEvent& operator=(NodeStatusChangeEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeStatusChangeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeStatusChangeEvent* internal_default_instance() {
    return reinterpret_cast<const NodeStatusChangeEvent*>(
        &_NodeStatusChangeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NodeStatusChangeEvent& a, NodeStatusChangeEvent& b) { a.Swap(&b); }
  inline void Swap(NodeStatusChangeEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeStatusChangeEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeStatusChangeEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NodeStatusChangeEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeStatusChangeEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeStatusChangeEvent& from) { NodeStatusChangeEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NodeStatusChangeEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.NodeStatusChangeEvent"; }

 protected:
  explicit NodeStatusChangeEvent(::google::protobuf::Arena* arena);
  NodeStatusChangeEvent(::google::protobuf::Arena* arena, const NodeStatusChangeEvent& from);
  NodeStatusChangeEvent(::google::protobuf::Arena* arena, NodeStatusChangeEvent&& from) noexcept
      : NodeStatusChangeEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeFieldNumber = 1,
    kPreviousStatusFieldNumber = 2,
    kCurrentStatusFieldNumber = 3,
  };
  // .dist.v1.Node node = 1 [json_name = "node"];
  bool has_node() const;
  void clear_node() ;
  const ::dist::v1::Node& node() const;
  PROTOBUF_NODISCARD ::dist::v1::Node* release_node();
  ::dist::v1::Node* mutable_node();
  void set_allocated_node(::dist::v1::Node* value);
  void unsafe_arena_set_allocated_node(::dist::v1::Node* value);
  ::dist::v1::Node* unsafe_arena_release_node();

  private:
  const ::dist::v1::Node& _internal_node() const;
  ::dist::v1::Node* _internal_mutable_node();

  public:
  // .dist.v1.Node.NodeStatus previous_status = 2 [json_name = "previousStatus"];
  void clear_previous_status() ;
  ::dist::v1::Node_NodeStatus previous_status() const;
  void set_previous_status(::dist::v1::Node_NodeStatus value);

  private:
  ::dist::v1::Node_NodeStatus _internal_previous_status() const;
  void _internal_set_previous_status(::dist::v1::Node_NodeStatus value);

  public:
  // .dist.v1.Node.NodeStatus current_status = 3 [json_name = "currentStatus"];
  void clear_current_status() ;
  ::dist::v1::Node_NodeStatus current_status() const;
  void set_current_status(::dist::v1::Node_NodeStatus value);

  private:
  ::dist::v1::Node_NodeStatus _internal_current_status() const;
  void _internal_set_current_status(::dist::v1::Node_NodeStatus value);

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.NodeStatusChangeEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NodeStatusChangeEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::dist::v1::Node* node_;
    int previous_status_;
    int current_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2fcommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Node

// string id = 1 [json_name = "id"];
inline void Node::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Node::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.Node.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Node::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.Node.id)
}
inline std::string* Node::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.Node.id)
  return _s;
}
inline const std::string& Node::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Node::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Node::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Node::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.Node.id)
  return _impl_.id_.Release();
}
inline void Node::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.Node.id)
}

// string name = 2 [json_name = "name"];
inline void Node::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Node::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.Node.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Node::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.Node.name)
}
inline std::string* Node::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dist.v1.Node.name)
  return _s;
}
inline const std::string& Node::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Node::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Node::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Node::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.Node.name)
  return _impl_.name_.Release();
}
inline void Node::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.Node.name)
}

// string address = 3 [json_name = "address"];
inline void Node::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Node::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.Node.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Node::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.Node.address)
}
inline std::string* Node::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:dist.v1.Node.address)
  return _s;
}
inline const std::string& Node::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void Node::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* Node::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* Node::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.Node.address)
  return _impl_.address_.Release();
}
inline void Node::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.Node.address)
}

// uint32 port = 4 [json_name = "port"];
inline void Node::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0u;
}
inline ::uint32_t Node::port() const {
  // @@protoc_insertion_point(field_get:dist.v1.Node.port)
  return _internal_port();
}
inline void Node::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dist.v1.Node.port)
}
inline ::uint32_t Node::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void Node::_internal_set_port(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// .dist.v1.Node.NodeStatus status = 5 [json_name = "status"];
inline void Node::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::dist::v1::Node_NodeStatus Node::status() const {
  // @@protoc_insertion_point(field_get:dist.v1.Node.status)
  return _internal_status();
}
inline void Node::set_status(::dist::v1::Node_NodeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dist.v1.Node.status)
}
inline ::dist::v1::Node_NodeStatus Node::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::dist::v1::Node_NodeStatus>(_impl_.status_);
}
inline void Node::_internal_set_status(::dist::v1::Node_NodeStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// Task

// string id = 1 [json_name = "id"];
inline void Task::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Task::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.Task.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Task::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.Task.id)
}
inline std::string* Task::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.Task.id)
  return _s;
}
inline const std::string& Task::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Task::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Task::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.Task.id)
  return _impl_.id_.Release();
}
inline void Task::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.Task.id)
}

// string name = 2 [json_name = "name"];
inline void Task::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Task::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.Task.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Task::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.Task.name)
}
inline std::string* Task::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dist.v1.Task.name)
  return _s;
}
inline const std::string& Task::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Task::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Task::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Task::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.Task.name)
  return _impl_.name_.Release();
}
inline void Task::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.Task.name)
}

// .dist.v1.Task.TaskType type = 3 [json_name = "type"];
inline void Task::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::dist::v1::Task_TaskType Task::type() const {
  // @@protoc_insertion_point(field_get:dist.v1.Task.type)
  return _internal_type();
}
inline void Task::set_type(::dist::v1::Task_TaskType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dist.v1.Task.type)
}
inline ::dist::v1::Task_TaskType Task::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::dist::v1::Task_TaskType>(_impl_.type_);
}
inline void Task::_internal_set_type(::dist::v1::Task_TaskType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .dist.v1.Task.TaskStatus status = 4 [json_name = "status"];
inline void Task::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::dist::v1::Task_TaskStatus Task::status() const {
  // @@protoc_insertion_point(field_get:dist.v1.Task.status)
  return _internal_status();
}
inline void Task::set_status(::dist::v1::Task_TaskStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dist.v1.Task.status)
}
inline ::dist::v1::Task_TaskStatus Task::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::dist::v1::Task_TaskStatus>(_impl_.status_);
}
inline void Task::_internal_set_status(::dist::v1::Task_TaskStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// bytes payload = 5 [json_name = "payload"];
inline void Task::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Task::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.Task.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Task::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.Task.payload)
}
inline std::string* Task::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:dist.v1.Task.payload)
  return _s;
}
inline const std::string& Task::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void Task::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* Task::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* Task::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.Task.payload)
  return _impl_.payload_.Release();
}
inline void Task::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.Task.payload)
}

// -------------------------------------------------------------------

// NodeStatusChangeEvent

// .dist.v1.Node node = 1 [json_name = "node"];
inline bool NodeStatusChangeEvent::has_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_ != nullptr);
  return value;
}
inline void NodeStatusChangeEvent::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_ != nullptr) _impl_.node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dist::v1::Node& NodeStatusChangeEvent::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::dist::v1::Node* p = _impl_.node_;
  return p != nullptr ? *p : reinterpret_cast<const ::dist::v1::Node&>(::dist::v1::_Node_default_instance_);
}
inline const ::dist::v1::Node& NodeStatusChangeEvent::node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.NodeStatusChangeEvent.node)
  return _internal_node();
}
inline void NodeStatusChangeEvent::unsafe_arena_set_allocated_node(::dist::v1::Node* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.node_);
  }
  _impl_.node_ = reinterpret_cast<::dist::v1::Node*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dist.v1.NodeStatusChangeEvent.node)
}
inline ::dist::v1::Node* NodeStatusChangeEvent::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dist::v1::Node* released = _impl_.node_;
  _impl_.node_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::dist::v1::Node* NodeStatusChangeEvent::unsafe_arena_release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.NodeStatusChangeEvent.node)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dist::v1::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
  return temp;
}
inline ::dist::v1::Node* NodeStatusChangeEvent::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::dist::v1::Node>(GetArena());
    _impl_.node_ = reinterpret_cast<::dist::v1::Node*>(p);
  }
  return _impl_.node_;
}
inline ::dist::v1::Node* NodeStatusChangeEvent::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::dist::v1::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:dist.v1.NodeStatusChangeEvent.node)
  return _msg;
}
inline void NodeStatusChangeEvent::set_allocated_node(::dist::v1::Node* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.node_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.node_ = reinterpret_cast<::dist::v1::Node*>(value);
  // @@protoc_insertion_point(field_set_allocated:dist.v1.NodeStatusChangeEvent.node)
}

// .dist.v1.Node.NodeStatus previous_status = 2 [json_name = "previousStatus"];
inline void NodeStatusChangeEvent::clear_previous_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_status_ = 0;
}
inline ::dist::v1::Node_NodeStatus NodeStatusChangeEvent::previous_status() const {
  // @@protoc_insertion_point(field_get:dist.v1.NodeStatusChangeEvent.previous_status)
  return _internal_previous_status();
}
inline void NodeStatusChangeEvent::set_previous_status(::dist::v1::Node_NodeStatus value) {
  _internal_set_previous_status(value);
  // @@protoc_insertion_point(field_set:dist.v1.NodeStatusChangeEvent.previous_status)
}
inline ::dist::v1::Node_NodeStatus NodeStatusChangeEvent::_internal_previous_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::dist::v1::Node_NodeStatus>(_impl_.previous_status_);
}
inline void NodeStatusChangeEvent::_internal_set_previous_status(::dist::v1::Node_NodeStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_status_ = value;
}

// .dist.v1.Node.NodeStatus current_status = 3 [json_name = "currentStatus"];
inline void NodeStatusChangeEvent::clear_current_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_status_ = 0;
}
inline ::dist::v1::Node_NodeStatus NodeStatusChangeEvent::current_status() const {
  // @@protoc_insertion_point(field_get:dist.v1.NodeStatusChangeEvent.current_status)
  return _internal_current_status();
}
inline void NodeStatusChangeEvent::set_current_status(::dist::v1::Node_NodeStatus value) {
  _internal_set_current_status(value);
  // @@protoc_insertion_point(field_set:dist.v1.NodeStatusChangeEvent.current_status)
}
inline ::dist::v1::Node_NodeStatus NodeStatusChangeEvent::_internal_current_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::dist::v1::Node_NodeStatus>(_impl_.current_status_);
}
inline void NodeStatusChangeEvent::_internal_set_current_status(::dist::v1::Node_NodeStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_status_ = value;
}

// -------------------------------------------------------------------

// ShutdownEvent

// string node_id = 1 [json_name = "nodeId"];
inline void ShutdownEvent::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& ShutdownEvent::node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.ShutdownEvent.node_id)
  return _internal_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShutdownEvent::set_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.ShutdownEvent.node_id)
}
inline std::string* ShutdownEvent::mutable_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.ShutdownEvent.node_id)
  return _s;
}
inline const std::string& ShutdownEvent::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_.Get();
}
inline void ShutdownEvent::_internal_set_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(value, GetArena());
}
inline std::string* ShutdownEvent::_internal_mutable_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_id_.Mutable( GetArena());
}
inline std::string* ShutdownEvent::release_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.ShutdownEvent.node_id)
  return _impl_.node_id_.Release();
}
inline void ShutdownEvent::set_allocated_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.ShutdownEvent.node_id)
}

// string reason = 2 [json_name = "reason"];
inline void ShutdownEvent::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& ShutdownEvent::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.ShutdownEvent.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShutdownEvent::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.ShutdownEvent.reason)
}
inline std::string* ShutdownEvent::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:dist.v1.ShutdownEvent.reason)
  return _s;
}
inline const std::string& ShutdownEvent::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void ShutdownEvent::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* ShutdownEvent::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* ShutdownEvent::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.ShutdownEvent.reason)
  return _impl_.reason_.Release();
}
inline void ShutdownEvent::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.ShutdownEvent.reason)
}

// -------------------------------------------------------------------

// TaskStatusChangeEvent

// .dist.v1.Task task = 1 [json_name = "task"];
inline bool TaskStatusChangeEvent::has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.task_ != nullptr);
  return value;
}
inline void TaskStatusChangeEvent::clear_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.task_ != nullptr) _impl_.task_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dist::v1::Task& TaskStatusChangeEvent::_internal_task() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::dist::v1::Task* p = _impl_.task_;
  return p != nullptr ? *p : reinterpret_cast<const ::dist::v1::Task&>(::dist::v1::_Task_default_instance_);
}
inline const ::dist::v1::Task& TaskStatusChangeEvent::task() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.TaskStatusChangeEvent.task)
  return _internal_task();
}
inline void TaskStatusChangeEvent::unsafe_arena_set_allocated_task(::dist::v1::Task* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.task_);
  }
  _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dist.v1.TaskStatusChangeEvent.task)
}
inline ::dist::v1::Task* TaskStatusChangeEvent::release_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dist::v1::Task* released = _impl_.task_;
  _impl_.task_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::dist::v1::Task* TaskStatusChangeEvent::unsafe_arena_release_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.TaskStatusChangeEvent.task)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dist::v1::Task* temp = _impl_.task_;
  _impl_.task_ = nullptr;
  return temp;
}
inline ::dist::v1::Task* TaskStatusChangeEvent::_internal_mutable_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.task_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::dist::v1::Task>(GetArena());
    _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(p);
  }
  return _impl_.task_;
}
inline ::dist::v1::Task* TaskStatusChangeEvent::mutable_task() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::dist::v1::Task* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:dist.v1.TaskStatusChangeEvent.task)
  return _msg;
}
inline void TaskStatusChangeEvent::set_allocated_task(::dist::v1::Task* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.task_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(value);
  // @@protoc_insertion_point(field_set_allocated:dist.v1.TaskStatusChangeEvent.task)
}

// .dist.v1.Task.TaskStatus previous_status = 2 [json_name = "previousStatus"];
inline void TaskStatusChangeEvent::clear_previous_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_status_ = 0;
}
inline ::dist::v1::Task_TaskStatus TaskStatusChangeEvent::previous_status() const {
  // @@protoc_insertion_point(field_get:dist.v1.TaskStatusChangeEvent.previous_status)
  return _internal_previous_status();
}
inline void TaskStatusChangeEvent::set_previous_status(::dist::v1::Task_TaskStatus value) {
  _internal_set_previous_status(value);
  // @@protoc_insertion_point(field_set:dist.v1.TaskStatusChangeEvent.previous_status)
}
inline ::dist::v1::Task_TaskStatus TaskStatusChangeEvent::_internal_previous_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::dist::v1::Task_TaskStatus>(_impl_.previous_status_);
}
inline void TaskStatusChangeEvent::_internal_set_previous_status(::dist::v1::Task_TaskStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_status_ = value;
}

// .dist.v1.Task.TaskStatus current_status = 3 [json_name = "currentStatus"];
inline void TaskStatusChangeEvent::clear_current_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_status_ = 0;
}
inline ::dist::v1::Task_TaskStatus TaskStatusChangeEvent::current_status() const {
  // @@protoc_insertion_point(field_get:dist.v1.TaskStatusChangeEvent.current_status)
  return _internal_current_status();
}
inline void TaskStatusChangeEvent::set_current_status(::dist::v1::Task_TaskStatus value) {
  _internal_set_current_status(value);
  // @@protoc_insertion_point(field_set:dist.v1.TaskStatusChangeEvent.current_status)
}
inline ::dist::v1::Task_TaskStatus TaskStatusChangeEvent::_internal_current_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::dist::v1::Task_TaskStatus>(_impl_.current_status_);
}
inline void TaskStatusChangeEvent::_internal_set_current_status(::dist::v1::Task_TaskStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_status_ = value;
}

// -------------------------------------------------------------------

// TaskAssignmentEvent

// .dist.v1.Task task = 1 [json_name = "task"];
inline bool TaskAssignmentEvent::has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.task_ != nullptr);
  return value;
}
inline void TaskAssignmentEvent::clear_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.task_ != nullptr) _impl_.task_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dist::v1::Task& TaskAssignmentEvent::_internal_task() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::dist::v1::Task* p = _impl_.task_;
  return p != nullptr ? *p : reinterpret_cast<const ::dist::v1::Task&>(::dist::v1::_Task_default_instance_);
}
inline const ::dist::v1::Task& TaskAssignmentEvent::task() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.TaskAssignmentEvent.task)
  return _internal_task();
}
inline void TaskAssignmentEvent::unsafe_arena_set_allocated_task(::dist::v1::Task* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.task_);
  }
  _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dist.v1.TaskAssignmentEvent.task)
}
inline ::dist::v1::Task* TaskAssignmentEvent::release_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dist::v1::Task* released = _impl_.task_;
  _impl_.task_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::dist::v1::Task* TaskAssignmentEvent::unsafe_arena_release_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.TaskAssignmentEvent.task)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dist::v1::Task* temp = _impl_.task_;
  _impl_.task_ = nullptr;
  return temp;
}
inline ::dist::v1::Task* TaskAssignmentEvent::_internal_mutable_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.task_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::dist::v1::Task>(GetArena());
    _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(p);
  }
  return _impl_.task_;
}
inline ::dist::v1::Task* TaskAssignmentEvent::mutable_task() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::dist::v1::Task* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:dist.v1.TaskAssignmentEvent.task)
  return _msg;
}
inline void TaskAssignmentEvent::set_allocated_task(::dist::v1::Task* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.task_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(value);
  // @@protoc_insertion_point(field_set_allocated:dist.v1.TaskAssignmentEvent.task)
}

// string assigned_node_id = 2 [json_name = "assignedNodeId"];
inline void TaskAssignmentEvent::clear_assigned_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_node_id_.ClearToEmpty();
}
inline const std::string& TaskAssignmentEvent::assigned_node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.TaskAssignmentEvent.assigned_node_id)
  return _internal_assigned_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignmentEvent::set_assigned_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.TaskAssignmentEvent.assigned_node_id)
}
inline std::string* TaskAssignmentEvent::mutable_assigned_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_assigned_node_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.TaskAssignmentEvent.assigned_node_id)
  return _s;
}
inline const std::string& TaskAssignmentEvent::_internal_assigned_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.assigned_node_id_.Get();
}
inline void TaskAssignmentEvent::_internal_set_assigned_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_node_id_.Set(value, GetArena());
}
inline std::string* TaskAssignmentEvent::_internal_mutable_assigned_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.assigned_node_id_.Mutable( GetArena());
}
inline std::string* TaskAssignmentEvent::release_assigned_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.TaskAssignmentEvent.assigned_node_id)
  return _impl_.assigned_node_id_.Release();
}
inline void TaskAssignmentEvent::set_allocated_assigned_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.assigned_node_id_.IsDefault()) {
    _impl_.assigned_node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.TaskAssignmentEvent.assigned_node_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace dist


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::dist::v1::Node_NodeStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dist::v1::Node_NodeStatus>() {
  return ::dist::v1::Node_NodeStatus_descriptor();
}
template <>
struct is_proto_enum<::dist::v1::Task_TaskType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dist::v1::Task_TaskType>() {
  return ::dist::v1::Task_TaskType_descriptor();
}
template <>
struct is_proto_enum<::dist::v1::Task_TaskStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dist::v1::Task_TaskStatus>() {
  return ::dist::v1::Task_TaskStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // dist_2fv1_2fcommon_2eproto_2epb_2eh
