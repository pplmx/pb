// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dist/v1/registry.proto

#include "dist/v1/registry.pb.h"
#include "dist/v1/registry.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dist {
namespace v1 {

static const char* RegistryService_method_names[] = {
  "/dist.v1.RegistryService/Register",
  "/dist.v1.RegistryService/Heartbeat",
  "/dist.v1.RegistryService/WatchRegistry",
};

std::unique_ptr< RegistryService::Stub> RegistryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RegistryService::Stub> stub(new RegistryService::Stub(channel, options));
  return stub;
}

RegistryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_(RegistryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(RegistryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchRegistry_(RegistryService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status RegistryService::Stub::Register(::grpc::ClientContext* context, const ::dist::v1::RegisterRequest& request, ::dist::v1::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dist::v1::RegisterRequest, ::dist::v1::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void RegistryService::Stub::async::Register(::grpc::ClientContext* context, const ::dist::v1::RegisterRequest* request, ::dist::v1::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dist::v1::RegisterRequest, ::dist::v1::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void RegistryService::Stub::async::Register(::grpc::ClientContext* context, const ::dist::v1::RegisterRequest* request, ::dist::v1::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dist::v1::RegisterResponse>* RegistryService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::dist::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dist::v1::RegisterResponse, ::dist::v1::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dist::v1::RegisterResponse>* RegistryService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::dist::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RegistryService::Stub::Heartbeat(::grpc::ClientContext* context, const ::dist::v1::HeartbeatRequest& request, ::dist::v1::HeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dist::v1::HeartbeatRequest, ::dist::v1::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void RegistryService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::dist::v1::HeartbeatRequest* request, ::dist::v1::HeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dist::v1::HeartbeatRequest, ::dist::v1::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void RegistryService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::dist::v1::HeartbeatRequest* request, ::dist::v1::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dist::v1::HeartbeatResponse>* RegistryService::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::dist::v1::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dist::v1::HeartbeatResponse, ::dist::v1::HeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dist::v1::HeartbeatResponse>* RegistryService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::dist::v1::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::dist::v1::WatchRegistryResponse>* RegistryService::Stub::WatchRegistryRaw(::grpc::ClientContext* context, const ::dist::v1::WatchRegistryRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::dist::v1::WatchRegistryResponse>::Create(channel_.get(), rpcmethod_WatchRegistry_, context, request);
}

void RegistryService::Stub::async::WatchRegistry(::grpc::ClientContext* context, const ::dist::v1::WatchRegistryRequest* request, ::grpc::ClientReadReactor< ::dist::v1::WatchRegistryResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dist::v1::WatchRegistryResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchRegistry_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dist::v1::WatchRegistryResponse>* RegistryService::Stub::AsyncWatchRegistryRaw(::grpc::ClientContext* context, const ::dist::v1::WatchRegistryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dist::v1::WatchRegistryResponse>::Create(channel_.get(), cq, rpcmethod_WatchRegistry_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dist::v1::WatchRegistryResponse>* RegistryService::Stub::PrepareAsyncWatchRegistryRaw(::grpc::ClientContext* context, const ::dist::v1::WatchRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dist::v1::WatchRegistryResponse>::Create(channel_.get(), cq, rpcmethod_WatchRegistry_, context, request, false, nullptr);
}

RegistryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryService::Service, ::dist::v1::RegisterRequest, ::dist::v1::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RegistryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dist::v1::RegisterRequest* req,
             ::dist::v1::RegisterResponse* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryService::Service, ::dist::v1::HeartbeatRequest, ::dist::v1::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RegistryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dist::v1::HeartbeatRequest* req,
             ::dist::v1::HeartbeatResponse* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RegistryService::Service, ::dist::v1::WatchRegistryRequest, ::dist::v1::WatchRegistryResponse>(
          [](RegistryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dist::v1::WatchRegistryRequest* req,
             ::grpc::ServerWriter<::dist::v1::WatchRegistryResponse>* writer) {
               return service->WatchRegistry(ctx, req, writer);
             }, this)));
}

RegistryService::Service::~Service() {
}

::grpc::Status RegistryService::Service::Register(::grpc::ServerContext* context, const ::dist::v1::RegisterRequest* request, ::dist::v1::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistryService::Service::Heartbeat(::grpc::ServerContext* context, const ::dist::v1::HeartbeatRequest* request, ::dist::v1::HeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistryService::Service::WatchRegistry(::grpc::ServerContext* context, const ::dist::v1::WatchRegistryRequest* request, ::grpc::ServerWriter< ::dist::v1::WatchRegistryResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dist
}  // namespace v1

