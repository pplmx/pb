// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dist/v1/task.proto
// Protobuf C++ Version: 5.29.0

#ifndef dist_2fv1_2ftask_2eproto_2epb_2eh
#define dist_2fv1_2ftask_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "dist/v1/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dist_2fv1_2ftask_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dist_2fv1_2ftask_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_dist_2fv1_2ftask_2eproto;
namespace dist {
namespace v1 {
class CancelTaskRequest;
struct CancelTaskRequestDefaultTypeInternal;
extern CancelTaskRequestDefaultTypeInternal _CancelTaskRequest_default_instance_;
class CancelTaskResponse;
struct CancelTaskResponseDefaultTypeInternal;
extern CancelTaskResponseDefaultTypeInternal _CancelTaskResponse_default_instance_;
class SubmitTaskRequest;
struct SubmitTaskRequestDefaultTypeInternal;
extern SubmitTaskRequestDefaultTypeInternal _SubmitTaskRequest_default_instance_;
class SubmitTaskResponse;
struct SubmitTaskResponseDefaultTypeInternal;
extern SubmitTaskResponseDefaultTypeInternal _SubmitTaskResponse_default_instance_;
class WatchTasksRequest;
struct WatchTasksRequestDefaultTypeInternal;
extern WatchTasksRequestDefaultTypeInternal _WatchTasksRequest_default_instance_;
class WatchTasksResponse;
struct WatchTasksResponseDefaultTypeInternal;
extern WatchTasksResponseDefaultTypeInternal _WatchTasksResponse_default_instance_;
}  // namespace v1
}  // namespace dist
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dist {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class WatchTasksRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.WatchTasksRequest) */ {
 public:
  inline WatchTasksRequest() : WatchTasksRequest(nullptr) {}
  ~WatchTasksRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WatchTasksRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WatchTasksRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WatchTasksRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline WatchTasksRequest(const WatchTasksRequest& from) : WatchTasksRequest(nullptr, from) {}
  inline WatchTasksRequest(WatchTasksRequest&& from) noexcept
      : WatchTasksRequest(nullptr, std::move(from)) {}
  inline WatchTasksRequest& operator=(const WatchTasksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchTasksRequest& operator=(WatchTasksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchTasksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchTasksRequest* internal_default_instance() {
    return reinterpret_cast<const WatchTasksRequest*>(
        &_WatchTasksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(WatchTasksRequest& a, WatchTasksRequest& b) { a.Swap(&b); }
  inline void Swap(WatchTasksRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchTasksRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchTasksRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WatchTasksRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WatchTasksRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WatchTasksRequest& from) { WatchTasksRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WatchTasksRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.WatchTasksRequest"; }

 protected:
  explicit WatchTasksRequest(::google::protobuf::Arena* arena);
  WatchTasksRequest(::google::protobuf::Arena* arena, const WatchTasksRequest& from);
  WatchTasksRequest(::google::protobuf::Arena* arena, WatchTasksRequest&& from) noexcept
      : WatchTasksRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdsFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated string task_ids = 2 [json_name = "taskIds"];
  int task_ids_size() const;
  private:
  int _internal_task_ids_size() const;

  public:
  void clear_task_ids() ;
  const std::string& task_ids(int index) const;
  std::string* mutable_task_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_ids(int index, Arg_&& value, Args_... args);
  std::string* add_task_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_task_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& task_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_task_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_task_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_task_ids();

  public:
  // string node_id = 1 [json_name = "nodeId"];
  void clear_node_id() ;
  const std::string& node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* value);

  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(
      const std::string& value);
  std::string* _internal_mutable_node_id();

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.WatchTasksRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WatchTasksRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> task_ids_;
    ::google::protobuf::internal::ArenaStringPtr node_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2ftask_2eproto;
};
// -------------------------------------------------------------------

class SubmitTaskResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.SubmitTaskResponse) */ {
 public:
  inline SubmitTaskResponse() : SubmitTaskResponse(nullptr) {}
  ~SubmitTaskResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubmitTaskResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubmitTaskResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitTaskResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitTaskResponse(const SubmitTaskResponse& from) : SubmitTaskResponse(nullptr, from) {}
  inline SubmitTaskResponse(SubmitTaskResponse&& from) noexcept
      : SubmitTaskResponse(nullptr, std::move(from)) {}
  inline SubmitTaskResponse& operator=(const SubmitTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTaskResponse& operator=(SubmitTaskResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitTaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitTaskResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitTaskResponse*>(
        &_SubmitTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SubmitTaskResponse& a, SubmitTaskResponse& b) { a.Swap(&b); }
  inline void Swap(SubmitTaskResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTaskResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitTaskResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubmitTaskResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitTaskResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitTaskResponse& from) { SubmitTaskResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubmitTaskResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.SubmitTaskResponse"; }

 protected:
  explicit SubmitTaskResponse(::google::protobuf::Arena* arena);
  SubmitTaskResponse(::google::protobuf::Arena* arena, const SubmitTaskResponse& from);
  SubmitTaskResponse(::google::protobuf::Arena* arena, SubmitTaskResponse&& from) noexcept
      : SubmitTaskResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 2,
    kErrorMessageFieldNumber = 3,
    kAcceptedFieldNumber = 1,
  };
  // string task_id = 2 [json_name = "taskId"];
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // string error_message = 3 [json_name = "errorMessage"];
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bool accepted = 1 [json_name = "accepted"];
  void clear_accepted() ;
  bool accepted() const;
  void set_accepted(bool value);

  private:
  bool _internal_accepted() const;
  void _internal_set_accepted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.SubmitTaskResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitTaskResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    bool accepted_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2ftask_2eproto;
};
// -------------------------------------------------------------------

class CancelTaskResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.CancelTaskResponse) */ {
 public:
  inline CancelTaskResponse() : CancelTaskResponse(nullptr) {}
  ~CancelTaskResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CancelTaskResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CancelTaskResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CancelTaskResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CancelTaskResponse(const CancelTaskResponse& from) : CancelTaskResponse(nullptr, from) {}
  inline CancelTaskResponse(CancelTaskResponse&& from) noexcept
      : CancelTaskResponse(nullptr, std::move(from)) {}
  inline CancelTaskResponse& operator=(const CancelTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelTaskResponse& operator=(CancelTaskResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelTaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelTaskResponse* internal_default_instance() {
    return reinterpret_cast<const CancelTaskResponse*>(
        &_CancelTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(CancelTaskResponse& a, CancelTaskResponse& b) { a.Swap(&b); }
  inline void Swap(CancelTaskResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelTaskResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelTaskResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CancelTaskResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CancelTaskResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CancelTaskResponse& from) { CancelTaskResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CancelTaskResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.CancelTaskResponse"; }

 protected:
  explicit CancelTaskResponse(::google::protobuf::Arena* arena);
  CancelTaskResponse(::google::protobuf::Arena* arena, const CancelTaskResponse& from);
  CancelTaskResponse(::google::protobuf::Arena* arena, CancelTaskResponse&& from) noexcept
      : CancelTaskResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2 [json_name = "errorMessage"];
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bool success = 1 [json_name = "success"];
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.CancelTaskResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CancelTaskResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2ftask_2eproto;
};
// -------------------------------------------------------------------

class CancelTaskRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.CancelTaskRequest) */ {
 public:
  inline CancelTaskRequest() : CancelTaskRequest(nullptr) {}
  ~CancelTaskRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CancelTaskRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CancelTaskRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CancelTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CancelTaskRequest(const CancelTaskRequest& from) : CancelTaskRequest(nullptr, from) {}
  inline CancelTaskRequest(CancelTaskRequest&& from) noexcept
      : CancelTaskRequest(nullptr, std::move(from)) {}
  inline CancelTaskRequest& operator=(const CancelTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelTaskRequest& operator=(CancelTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CancelTaskRequest*>(
        &_CancelTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CancelTaskRequest& a, CancelTaskRequest& b) { a.Swap(&b); }
  inline void Swap(CancelTaskRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CancelTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CancelTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CancelTaskRequest& from) { CancelTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CancelTaskRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.CancelTaskRequest"; }

 protected:
  explicit CancelTaskRequest(::google::protobuf::Arena* arena);
  CancelTaskRequest(::google::protobuf::Arena* arena, const CancelTaskRequest& from);
  CancelTaskRequest(::google::protobuf::Arena* arena, CancelTaskRequest&& from) noexcept
      : CancelTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 1,
    kRequesterNodeIdFieldNumber = 2,
  };
  // string task_id = 1 [json_name = "taskId"];
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // string requester_node_id = 2 [json_name = "requesterNodeId"];
  void clear_requester_node_id() ;
  const std::string& requester_node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requester_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_requester_node_id();
  PROTOBUF_NODISCARD std::string* release_requester_node_id();
  void set_allocated_requester_node_id(std::string* value);

  private:
  const std::string& _internal_requester_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_node_id(
      const std::string& value);
  std::string* _internal_mutable_requester_node_id();

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.CancelTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CancelTaskRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::google::protobuf::internal::ArenaStringPtr requester_node_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2ftask_2eproto;
};
// -------------------------------------------------------------------

class SubmitTaskRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.SubmitTaskRequest) */ {
 public:
  inline SubmitTaskRequest() : SubmitTaskRequest(nullptr) {}
  ~SubmitTaskRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubmitTaskRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubmitTaskRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitTaskRequest(const SubmitTaskRequest& from) : SubmitTaskRequest(nullptr, from) {}
  inline SubmitTaskRequest(SubmitTaskRequest&& from) noexcept
      : SubmitTaskRequest(nullptr, std::move(from)) {}
  inline SubmitTaskRequest& operator=(const SubmitTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTaskRequest& operator=(SubmitTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitTaskRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitTaskRequest*>(
        &_SubmitTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SubmitTaskRequest& a, SubmitTaskRequest& b) { a.Swap(&b); }
  inline void Swap(SubmitTaskRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubmitTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitTaskRequest& from) { SubmitTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubmitTaskRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.SubmitTaskRequest"; }

 protected:
  explicit SubmitTaskRequest(::google::protobuf::Arena* arena);
  SubmitTaskRequest(::google::protobuf::Arena* arena, const SubmitTaskRequest& from);
  SubmitTaskRequest(::google::protobuf::Arena* arena, SubmitTaskRequest&& from) noexcept
      : SubmitTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequesterNodeIdFieldNumber = 2,
    kTaskFieldNumber = 1,
  };
  // string requester_node_id = 2 [json_name = "requesterNodeId"];
  void clear_requester_node_id() ;
  const std::string& requester_node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requester_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_requester_node_id();
  PROTOBUF_NODISCARD std::string* release_requester_node_id();
  void set_allocated_requester_node_id(std::string* value);

  private:
  const std::string& _internal_requester_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_node_id(
      const std::string& value);
  std::string* _internal_mutable_requester_node_id();

  public:
  // .dist.v1.Task task = 1 [json_name = "task"];
  bool has_task() const;
  void clear_task() ;
  const ::dist::v1::Task& task() const;
  PROTOBUF_NODISCARD ::dist::v1::Task* release_task();
  ::dist::v1::Task* mutable_task();
  void set_allocated_task(::dist::v1::Task* value);
  void unsafe_arena_set_allocated_task(::dist::v1::Task* value);
  ::dist::v1::Task* unsafe_arena_release_task();

  private:
  const ::dist::v1::Task& _internal_task() const;
  ::dist::v1::Task* _internal_mutable_task();

  public:
  // @@protoc_insertion_point(class_scope:dist.v1.SubmitTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitTaskRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr requester_node_id_;
    ::dist::v1::Task* task_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2ftask_2eproto;
};
// -------------------------------------------------------------------

class WatchTasksResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dist.v1.WatchTasksResponse) */ {
 public:
  inline WatchTasksResponse() : WatchTasksResponse(nullptr) {}
  ~WatchTasksResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WatchTasksResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WatchTasksResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WatchTasksResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline WatchTasksResponse(const WatchTasksResponse& from) : WatchTasksResponse(nullptr, from) {}
  inline WatchTasksResponse(WatchTasksResponse&& from) noexcept
      : WatchTasksResponse(nullptr, std::move(from)) {}
  inline WatchTasksResponse& operator=(const WatchTasksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchTasksResponse& operator=(WatchTasksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchTasksResponse& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kTaskStatusChange = 1,
    kTaskAssignment = 2,
    EVENT_NOT_SET = 0,
  };
  static inline const WatchTasksResponse* internal_default_instance() {
    return reinterpret_cast<const WatchTasksResponse*>(
        &_WatchTasksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(WatchTasksResponse& a, WatchTasksResponse& b) { a.Swap(&b); }
  inline void Swap(WatchTasksResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchTasksResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchTasksResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WatchTasksResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WatchTasksResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WatchTasksResponse& from) { WatchTasksResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WatchTasksResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dist.v1.WatchTasksResponse"; }

 protected:
  explicit WatchTasksResponse(::google::protobuf::Arena* arena);
  WatchTasksResponse(::google::protobuf::Arena* arena, const WatchTasksResponse& from);
  WatchTasksResponse(::google::protobuf::Arena* arena, WatchTasksResponse&& from) noexcept
      : WatchTasksResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskStatusChangeFieldNumber = 1,
    kTaskAssignmentFieldNumber = 2,
  };
  // .dist.v1.TaskStatusChangeEvent task_status_change = 1 [json_name = "taskStatusChange"];
  bool has_task_status_change() const;
  private:
  bool _internal_has_task_status_change() const;

  public:
  void clear_task_status_change() ;
  const ::dist::v1::TaskStatusChangeEvent& task_status_change() const;
  PROTOBUF_NODISCARD ::dist::v1::TaskStatusChangeEvent* release_task_status_change();
  ::dist::v1::TaskStatusChangeEvent* mutable_task_status_change();
  void set_allocated_task_status_change(::dist::v1::TaskStatusChangeEvent* value);
  void unsafe_arena_set_allocated_task_status_change(::dist::v1::TaskStatusChangeEvent* value);
  ::dist::v1::TaskStatusChangeEvent* unsafe_arena_release_task_status_change();

  private:
  const ::dist::v1::TaskStatusChangeEvent& _internal_task_status_change() const;
  ::dist::v1::TaskStatusChangeEvent* _internal_mutable_task_status_change();

  public:
  // .dist.v1.TaskAssignmentEvent task_assignment = 2 [json_name = "taskAssignment"];
  bool has_task_assignment() const;
  private:
  bool _internal_has_task_assignment() const;

  public:
  void clear_task_assignment() ;
  const ::dist::v1::TaskAssignmentEvent& task_assignment() const;
  PROTOBUF_NODISCARD ::dist::v1::TaskAssignmentEvent* release_task_assignment();
  ::dist::v1::TaskAssignmentEvent* mutable_task_assignment();
  void set_allocated_task_assignment(::dist::v1::TaskAssignmentEvent* value);
  void unsafe_arena_set_allocated_task_assignment(::dist::v1::TaskAssignmentEvent* value);
  ::dist::v1::TaskAssignmentEvent* unsafe_arena_release_task_assignment();

  private:
  const ::dist::v1::TaskAssignmentEvent& _internal_task_assignment() const;
  ::dist::v1::TaskAssignmentEvent* _internal_mutable_task_assignment();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:dist.v1.WatchTasksResponse)
 private:
  class _Internal;
  void set_has_task_status_change();
  void set_has_task_assignment();
  inline bool has_event() const;
  inline void clear_has_event();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WatchTasksResponse& from_msg);
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::dist::v1::TaskStatusChangeEvent* task_status_change_;
      ::dist::v1::TaskAssignmentEvent* task_assignment_;
    } event_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dist_2fv1_2ftask_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SubmitTaskRequest

// .dist.v1.Task task = 1 [json_name = "task"];
inline bool SubmitTaskRequest::has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.task_ != nullptr);
  return value;
}
inline const ::dist::v1::Task& SubmitTaskRequest::_internal_task() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::dist::v1::Task* p = _impl_.task_;
  return p != nullptr ? *p : reinterpret_cast<const ::dist::v1::Task&>(::dist::v1::_Task_default_instance_);
}
inline const ::dist::v1::Task& SubmitTaskRequest::task() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.SubmitTaskRequest.task)
  return _internal_task();
}
inline void SubmitTaskRequest::unsafe_arena_set_allocated_task(::dist::v1::Task* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.task_);
  }
  _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dist.v1.SubmitTaskRequest.task)
}
inline ::dist::v1::Task* SubmitTaskRequest::release_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dist::v1::Task* released = _impl_.task_;
  _impl_.task_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::dist::v1::Task* SubmitTaskRequest::unsafe_arena_release_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.SubmitTaskRequest.task)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dist::v1::Task* temp = _impl_.task_;
  _impl_.task_ = nullptr;
  return temp;
}
inline ::dist::v1::Task* SubmitTaskRequest::_internal_mutable_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.task_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::dist::v1::Task>(GetArena());
    _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(p);
  }
  return _impl_.task_;
}
inline ::dist::v1::Task* SubmitTaskRequest::mutable_task() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::dist::v1::Task* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:dist.v1.SubmitTaskRequest.task)
  return _msg;
}
inline void SubmitTaskRequest::set_allocated_task(::dist::v1::Task* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.task_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.task_ = reinterpret_cast<::dist::v1::Task*>(value);
  // @@protoc_insertion_point(field_set_allocated:dist.v1.SubmitTaskRequest.task)
}

// string requester_node_id = 2 [json_name = "requesterNodeId"];
inline void SubmitTaskRequest::clear_requester_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_node_id_.ClearToEmpty();
}
inline const std::string& SubmitTaskRequest::requester_node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.SubmitTaskRequest.requester_node_id)
  return _internal_requester_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitTaskRequest::set_requester_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.SubmitTaskRequest.requester_node_id)
}
inline std::string* SubmitTaskRequest::mutable_requester_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requester_node_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.SubmitTaskRequest.requester_node_id)
  return _s;
}
inline const std::string& SubmitTaskRequest::_internal_requester_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requester_node_id_.Get();
}
inline void SubmitTaskRequest::_internal_set_requester_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_node_id_.Set(value, GetArena());
}
inline std::string* SubmitTaskRequest::_internal_mutable_requester_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.requester_node_id_.Mutable( GetArena());
}
inline std::string* SubmitTaskRequest::release_requester_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.SubmitTaskRequest.requester_node_id)
  return _impl_.requester_node_id_.Release();
}
inline void SubmitTaskRequest::set_allocated_requester_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.requester_node_id_.IsDefault()) {
    _impl_.requester_node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.SubmitTaskRequest.requester_node_id)
}

// -------------------------------------------------------------------

// SubmitTaskResponse

// bool accepted = 1 [json_name = "accepted"];
inline void SubmitTaskResponse::clear_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = false;
}
inline bool SubmitTaskResponse::accepted() const {
  // @@protoc_insertion_point(field_get:dist.v1.SubmitTaskResponse.accepted)
  return _internal_accepted();
}
inline void SubmitTaskResponse::set_accepted(bool value) {
  _internal_set_accepted(value);
  // @@protoc_insertion_point(field_set:dist.v1.SubmitTaskResponse.accepted)
}
inline bool SubmitTaskResponse::_internal_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accepted_;
}
inline void SubmitTaskResponse::_internal_set_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = value;
}

// string task_id = 2 [json_name = "taskId"];
inline void SubmitTaskResponse::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& SubmitTaskResponse::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.SubmitTaskResponse.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitTaskResponse::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.SubmitTaskResponse.task_id)
}
inline std::string* SubmitTaskResponse::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.SubmitTaskResponse.task_id)
  return _s;
}
inline const std::string& SubmitTaskResponse::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void SubmitTaskResponse::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* SubmitTaskResponse::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* SubmitTaskResponse::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.SubmitTaskResponse.task_id)
  return _impl_.task_id_.Release();
}
inline void SubmitTaskResponse::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.SubmitTaskResponse.task_id)
}

// string error_message = 3 [json_name = "errorMessage"];
inline void SubmitTaskResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& SubmitTaskResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.SubmitTaskResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitTaskResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.SubmitTaskResponse.error_message)
}
inline std::string* SubmitTaskResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:dist.v1.SubmitTaskResponse.error_message)
  return _s;
}
inline const std::string& SubmitTaskResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void SubmitTaskResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* SubmitTaskResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* SubmitTaskResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.SubmitTaskResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void SubmitTaskResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.SubmitTaskResponse.error_message)
}

// -------------------------------------------------------------------

// WatchTasksRequest

// string node_id = 1 [json_name = "nodeId"];
inline void WatchTasksRequest::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& WatchTasksRequest::node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.WatchTasksRequest.node_id)
  return _internal_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WatchTasksRequest::set_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.WatchTasksRequest.node_id)
}
inline std::string* WatchTasksRequest::mutable_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.WatchTasksRequest.node_id)
  return _s;
}
inline const std::string& WatchTasksRequest::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_.Get();
}
inline void WatchTasksRequest::_internal_set_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(value, GetArena());
}
inline std::string* WatchTasksRequest::_internal_mutable_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_id_.Mutable( GetArena());
}
inline std::string* WatchTasksRequest::release_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.WatchTasksRequest.node_id)
  return _impl_.node_id_.Release();
}
inline void WatchTasksRequest::set_allocated_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.WatchTasksRequest.node_id)
}

// repeated string task_ids = 2 [json_name = "taskIds"];
inline int WatchTasksRequest::_internal_task_ids_size() const {
  return _internal_task_ids().size();
}
inline int WatchTasksRequest::task_ids_size() const {
  return _internal_task_ids_size();
}
inline void WatchTasksRequest::clear_task_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_ids_.Clear();
}
inline std::string* WatchTasksRequest::add_task_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_task_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:dist.v1.WatchTasksRequest.task_ids)
  return _s;
}
inline const std::string& WatchTasksRequest::task_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.WatchTasksRequest.task_ids)
  return _internal_task_ids().Get(index);
}
inline std::string* WatchTasksRequest::mutable_task_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dist.v1.WatchTasksRequest.task_ids)
  return _internal_mutable_task_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void WatchTasksRequest::set_task_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_task_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:dist.v1.WatchTasksRequest.task_ids)
}
template <typename Arg_, typename... Args_>
inline void WatchTasksRequest::add_task_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_task_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:dist.v1.WatchTasksRequest.task_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WatchTasksRequest::task_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dist.v1.WatchTasksRequest.task_ids)
  return _internal_task_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WatchTasksRequest::mutable_task_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dist.v1.WatchTasksRequest.task_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_task_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WatchTasksRequest::_internal_task_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WatchTasksRequest::_internal_mutable_task_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.task_ids_;
}

// -------------------------------------------------------------------

// WatchTasksResponse

// .dist.v1.TaskStatusChangeEvent task_status_change = 1 [json_name = "taskStatusChange"];
inline bool WatchTasksResponse::has_task_status_change() const {
  return event_case() == kTaskStatusChange;
}
inline bool WatchTasksResponse::_internal_has_task_status_change() const {
  return event_case() == kTaskStatusChange;
}
inline void WatchTasksResponse::set_has_task_status_change() {
  _impl_._oneof_case_[0] = kTaskStatusChange;
}
inline ::dist::v1::TaskStatusChangeEvent* WatchTasksResponse::release_task_status_change() {
  // @@protoc_insertion_point(field_release:dist.v1.WatchTasksResponse.task_status_change)
  if (event_case() == kTaskStatusChange) {
    clear_has_event();
    auto* temp = _impl_.event_.task_status_change_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.task_status_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dist::v1::TaskStatusChangeEvent& WatchTasksResponse::_internal_task_status_change() const {
  return event_case() == kTaskStatusChange ? *_impl_.event_.task_status_change_ : reinterpret_cast<::dist::v1::TaskStatusChangeEvent&>(::dist::v1::_TaskStatusChangeEvent_default_instance_);
}
inline const ::dist::v1::TaskStatusChangeEvent& WatchTasksResponse::task_status_change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.WatchTasksResponse.task_status_change)
  return _internal_task_status_change();
}
inline ::dist::v1::TaskStatusChangeEvent* WatchTasksResponse::unsafe_arena_release_task_status_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dist.v1.WatchTasksResponse.task_status_change)
  if (event_case() == kTaskStatusChange) {
    clear_has_event();
    auto* temp = _impl_.event_.task_status_change_;
    _impl_.event_.task_status_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WatchTasksResponse::unsafe_arena_set_allocated_task_status_change(::dist::v1::TaskStatusChangeEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_task_status_change();
    _impl_.event_.task_status_change_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dist.v1.WatchTasksResponse.task_status_change)
}
inline ::dist::v1::TaskStatusChangeEvent* WatchTasksResponse::_internal_mutable_task_status_change() {
  if (event_case() != kTaskStatusChange) {
    clear_event();
    set_has_task_status_change();
    _impl_.event_.task_status_change_ =
        ::google::protobuf::Message::DefaultConstruct<::dist::v1::TaskStatusChangeEvent>(GetArena());
  }
  return _impl_.event_.task_status_change_;
}
inline ::dist::v1::TaskStatusChangeEvent* WatchTasksResponse::mutable_task_status_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dist::v1::TaskStatusChangeEvent* _msg = _internal_mutable_task_status_change();
  // @@protoc_insertion_point(field_mutable:dist.v1.WatchTasksResponse.task_status_change)
  return _msg;
}

// .dist.v1.TaskAssignmentEvent task_assignment = 2 [json_name = "taskAssignment"];
inline bool WatchTasksResponse::has_task_assignment() const {
  return event_case() == kTaskAssignment;
}
inline bool WatchTasksResponse::_internal_has_task_assignment() const {
  return event_case() == kTaskAssignment;
}
inline void WatchTasksResponse::set_has_task_assignment() {
  _impl_._oneof_case_[0] = kTaskAssignment;
}
inline ::dist::v1::TaskAssignmentEvent* WatchTasksResponse::release_task_assignment() {
  // @@protoc_insertion_point(field_release:dist.v1.WatchTasksResponse.task_assignment)
  if (event_case() == kTaskAssignment) {
    clear_has_event();
    auto* temp = _impl_.event_.task_assignment_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.task_assignment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dist::v1::TaskAssignmentEvent& WatchTasksResponse::_internal_task_assignment() const {
  return event_case() == kTaskAssignment ? *_impl_.event_.task_assignment_ : reinterpret_cast<::dist::v1::TaskAssignmentEvent&>(::dist::v1::_TaskAssignmentEvent_default_instance_);
}
inline const ::dist::v1::TaskAssignmentEvent& WatchTasksResponse::task_assignment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.WatchTasksResponse.task_assignment)
  return _internal_task_assignment();
}
inline ::dist::v1::TaskAssignmentEvent* WatchTasksResponse::unsafe_arena_release_task_assignment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dist.v1.WatchTasksResponse.task_assignment)
  if (event_case() == kTaskAssignment) {
    clear_has_event();
    auto* temp = _impl_.event_.task_assignment_;
    _impl_.event_.task_assignment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WatchTasksResponse::unsafe_arena_set_allocated_task_assignment(::dist::v1::TaskAssignmentEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_task_assignment();
    _impl_.event_.task_assignment_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dist.v1.WatchTasksResponse.task_assignment)
}
inline ::dist::v1::TaskAssignmentEvent* WatchTasksResponse::_internal_mutable_task_assignment() {
  if (event_case() != kTaskAssignment) {
    clear_event();
    set_has_task_assignment();
    _impl_.event_.task_assignment_ =
        ::google::protobuf::Message::DefaultConstruct<::dist::v1::TaskAssignmentEvent>(GetArena());
  }
  return _impl_.event_.task_assignment_;
}
inline ::dist::v1::TaskAssignmentEvent* WatchTasksResponse::mutable_task_assignment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dist::v1::TaskAssignmentEvent* _msg = _internal_mutable_task_assignment();
  // @@protoc_insertion_point(field_mutable:dist.v1.WatchTasksResponse.task_assignment)
  return _msg;
}

inline bool WatchTasksResponse::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void WatchTasksResponse::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline WatchTasksResponse::EventCase WatchTasksResponse::event_case() const {
  return WatchTasksResponse::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CancelTaskRequest

// string task_id = 1 [json_name = "taskId"];
inline void CancelTaskRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& CancelTaskRequest::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.CancelTaskRequest.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelTaskRequest::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.CancelTaskRequest.task_id)
}
inline std::string* CancelTaskRequest::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.CancelTaskRequest.task_id)
  return _s;
}
inline const std::string& CancelTaskRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void CancelTaskRequest::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* CancelTaskRequest::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* CancelTaskRequest::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.CancelTaskRequest.task_id)
  return _impl_.task_id_.Release();
}
inline void CancelTaskRequest::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.CancelTaskRequest.task_id)
}

// string requester_node_id = 2 [json_name = "requesterNodeId"];
inline void CancelTaskRequest::clear_requester_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_node_id_.ClearToEmpty();
}
inline const std::string& CancelTaskRequest::requester_node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.CancelTaskRequest.requester_node_id)
  return _internal_requester_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelTaskRequest::set_requester_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.CancelTaskRequest.requester_node_id)
}
inline std::string* CancelTaskRequest::mutable_requester_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requester_node_id();
  // @@protoc_insertion_point(field_mutable:dist.v1.CancelTaskRequest.requester_node_id)
  return _s;
}
inline const std::string& CancelTaskRequest::_internal_requester_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requester_node_id_.Get();
}
inline void CancelTaskRequest::_internal_set_requester_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_node_id_.Set(value, GetArena());
}
inline std::string* CancelTaskRequest::_internal_mutable_requester_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.requester_node_id_.Mutable( GetArena());
}
inline std::string* CancelTaskRequest::release_requester_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.CancelTaskRequest.requester_node_id)
  return _impl_.requester_node_id_.Release();
}
inline void CancelTaskRequest::set_allocated_requester_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.requester_node_id_.IsDefault()) {
    _impl_.requester_node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.CancelTaskRequest.requester_node_id)
}

// -------------------------------------------------------------------

// CancelTaskResponse

// bool success = 1 [json_name = "success"];
inline void CancelTaskResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CancelTaskResponse::success() const {
  // @@protoc_insertion_point(field_get:dist.v1.CancelTaskResponse.success)
  return _internal_success();
}
inline void CancelTaskResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:dist.v1.CancelTaskResponse.success)
}
inline bool CancelTaskResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CancelTaskResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2 [json_name = "errorMessage"];
inline void CancelTaskResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& CancelTaskResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dist.v1.CancelTaskResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelTaskResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dist.v1.CancelTaskResponse.error_message)
}
inline std::string* CancelTaskResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:dist.v1.CancelTaskResponse.error_message)
  return _s;
}
inline const std::string& CancelTaskResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void CancelTaskResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* CancelTaskResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* CancelTaskResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dist.v1.CancelTaskResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void CancelTaskResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dist.v1.CancelTaskResponse.error_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace dist


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // dist_2fv1_2ftask_2eproto_2epb_2eh
