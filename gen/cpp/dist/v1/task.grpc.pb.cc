// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dist/v1/task.proto

#include "dist/v1/task.pb.h"
#include "dist/v1/task.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dist {
namespace v1 {

static const char* DistributedTaskService_method_names[] = {
  "/dist.v1.DistributedTaskService/SubmitTask",
  "/dist.v1.DistributedTaskService/WatchTasks",
  "/dist.v1.DistributedTaskService/CancelTask",
};

std::unique_ptr< DistributedTaskService::Stub> DistributedTaskService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DistributedTaskService::Stub> stub(new DistributedTaskService::Stub(channel, options));
  return stub;
}

DistributedTaskService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitTask_(DistributedTaskService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchTasks_(DistributedTaskService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CancelTask_(DistributedTaskService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DistributedTaskService::Stub::SubmitTask(::grpc::ClientContext* context, const ::dist::v1::SubmitTaskRequest& request, ::dist::v1::SubmitTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dist::v1::SubmitTaskRequest, ::dist::v1::SubmitTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitTask_, context, request, response);
}

void DistributedTaskService::Stub::async::SubmitTask(::grpc::ClientContext* context, const ::dist::v1::SubmitTaskRequest* request, ::dist::v1::SubmitTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dist::v1::SubmitTaskRequest, ::dist::v1::SubmitTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTask_, context, request, response, std::move(f));
}

void DistributedTaskService::Stub::async::SubmitTask(::grpc::ClientContext* context, const ::dist::v1::SubmitTaskRequest* request, ::dist::v1::SubmitTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dist::v1::SubmitTaskResponse>* DistributedTaskService::Stub::PrepareAsyncSubmitTaskRaw(::grpc::ClientContext* context, const ::dist::v1::SubmitTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dist::v1::SubmitTaskResponse, ::dist::v1::SubmitTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dist::v1::SubmitTaskResponse>* DistributedTaskService::Stub::AsyncSubmitTaskRaw(::grpc::ClientContext* context, const ::dist::v1::SubmitTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::dist::v1::WatchTasksResponse>* DistributedTaskService::Stub::WatchTasksRaw(::grpc::ClientContext* context, const ::dist::v1::WatchTasksRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::dist::v1::WatchTasksResponse>::Create(channel_.get(), rpcmethod_WatchTasks_, context, request);
}

void DistributedTaskService::Stub::async::WatchTasks(::grpc::ClientContext* context, const ::dist::v1::WatchTasksRequest* request, ::grpc::ClientReadReactor< ::dist::v1::WatchTasksResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dist::v1::WatchTasksResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchTasks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dist::v1::WatchTasksResponse>* DistributedTaskService::Stub::AsyncWatchTasksRaw(::grpc::ClientContext* context, const ::dist::v1::WatchTasksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dist::v1::WatchTasksResponse>::Create(channel_.get(), cq, rpcmethod_WatchTasks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dist::v1::WatchTasksResponse>* DistributedTaskService::Stub::PrepareAsyncWatchTasksRaw(::grpc::ClientContext* context, const ::dist::v1::WatchTasksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dist::v1::WatchTasksResponse>::Create(channel_.get(), cq, rpcmethod_WatchTasks_, context, request, false, nullptr);
}

::grpc::Status DistributedTaskService::Stub::CancelTask(::grpc::ClientContext* context, const ::dist::v1::CancelTaskRequest& request, ::dist::v1::CancelTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dist::v1::CancelTaskRequest, ::dist::v1::CancelTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelTask_, context, request, response);
}

void DistributedTaskService::Stub::async::CancelTask(::grpc::ClientContext* context, const ::dist::v1::CancelTaskRequest* request, ::dist::v1::CancelTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dist::v1::CancelTaskRequest, ::dist::v1::CancelTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelTask_, context, request, response, std::move(f));
}

void DistributedTaskService::Stub::async::CancelTask(::grpc::ClientContext* context, const ::dist::v1::CancelTaskRequest* request, ::dist::v1::CancelTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dist::v1::CancelTaskResponse>* DistributedTaskService::Stub::PrepareAsyncCancelTaskRaw(::grpc::ClientContext* context, const ::dist::v1::CancelTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dist::v1::CancelTaskResponse, ::dist::v1::CancelTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dist::v1::CancelTaskResponse>* DistributedTaskService::Stub::AsyncCancelTaskRaw(::grpc::ClientContext* context, const ::dist::v1::CancelTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

DistributedTaskService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedTaskService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedTaskService::Service, ::dist::v1::SubmitTaskRequest, ::dist::v1::SubmitTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DistributedTaskService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dist::v1::SubmitTaskRequest* req,
             ::dist::v1::SubmitTaskResponse* resp) {
               return service->SubmitTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedTaskService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DistributedTaskService::Service, ::dist::v1::WatchTasksRequest, ::dist::v1::WatchTasksResponse>(
          [](DistributedTaskService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dist::v1::WatchTasksRequest* req,
             ::grpc::ServerWriter<::dist::v1::WatchTasksResponse>* writer) {
               return service->WatchTasks(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DistributedTaskService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DistributedTaskService::Service, ::dist::v1::CancelTaskRequest, ::dist::v1::CancelTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DistributedTaskService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dist::v1::CancelTaskRequest* req,
             ::dist::v1::CancelTaskResponse* resp) {
               return service->CancelTask(ctx, req, resp);
             }, this)));
}

DistributedTaskService::Service::~Service() {
}

::grpc::Status DistributedTaskService::Service::SubmitTask(::grpc::ServerContext* context, const ::dist::v1::SubmitTaskRequest* request, ::dist::v1::SubmitTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistributedTaskService::Service::WatchTasks(::grpc::ServerContext* context, const ::dist::v1::WatchTasksRequest* request, ::grpc::ServerWriter< ::dist::v1::WatchTasksResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DistributedTaskService::Service::CancelTask(::grpc::ServerContext* context, const ::dist::v1::CancelTaskRequest* request, ::dist::v1::CancelTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dist
}  // namespace v1

