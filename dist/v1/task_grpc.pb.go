// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dist/v1/task.proto

package distv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DistributedTaskService_SubmitTask_FullMethodName = "/dist.v1.DistributedTaskService/SubmitTask"
	DistributedTaskService_WatchTasks_FullMethodName = "/dist.v1.DistributedTaskService/WatchTasks"
	DistributedTaskService_CancelTask_FullMethodName = "/dist.v1.DistributedTaskService/CancelTask"
)

// DistributedTaskServiceClient is the client API for DistributedTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Distributed Task Service for task scheduling and monitoring
type DistributedTaskServiceClient interface {
	// Submit a new task for distributed processing
	SubmitTask(ctx context.Context, in *SubmitTaskRequest, opts ...grpc.CallOption) (*SubmitTaskResponse, error)
	// Watch task status and events
	WatchTasks(ctx context.Context, in *WatchTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchTasksResponse], error)
	// Cancel a running task
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error)
}

type distributedTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedTaskServiceClient(cc grpc.ClientConnInterface) DistributedTaskServiceClient {
	return &distributedTaskServiceClient{cc}
}

func (c *distributedTaskServiceClient) SubmitTask(ctx context.Context, in *SubmitTaskRequest, opts ...grpc.CallOption) (*SubmitTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTaskResponse)
	err := c.cc.Invoke(ctx, DistributedTaskService_SubmitTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedTaskServiceClient) WatchTasks(ctx context.Context, in *WatchTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchTasksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DistributedTaskService_ServiceDesc.Streams[0], DistributedTaskService_WatchTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchTasksRequest, WatchTasksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DistributedTaskService_WatchTasksClient = grpc.ServerStreamingClient[WatchTasksResponse]

func (c *distributedTaskServiceClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTaskResponse)
	err := c.cc.Invoke(ctx, DistributedTaskService_CancelTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedTaskServiceServer is the server API for DistributedTaskService service.
// All implementations must embed UnimplementedDistributedTaskServiceServer
// for forward compatibility.
//
// Distributed Task Service for task scheduling and monitoring
type DistributedTaskServiceServer interface {
	// Submit a new task for distributed processing
	SubmitTask(context.Context, *SubmitTaskRequest) (*SubmitTaskResponse, error)
	// Watch task status and events
	WatchTasks(*WatchTasksRequest, grpc.ServerStreamingServer[WatchTasksResponse]) error
	// Cancel a running task
	CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error)
	mustEmbedUnimplementedDistributedTaskServiceServer()
}

// UnimplementedDistributedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistributedTaskServiceServer struct{}

func (UnimplementedDistributedTaskServiceServer) SubmitTask(context.Context, *SubmitTaskRequest) (*SubmitTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTask not implemented")
}
func (UnimplementedDistributedTaskServiceServer) WatchTasks(*WatchTasksRequest, grpc.ServerStreamingServer[WatchTasksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchTasks not implemented")
}
func (UnimplementedDistributedTaskServiceServer) CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedDistributedTaskServiceServer) mustEmbedUnimplementedDistributedTaskServiceServer() {
}
func (UnimplementedDistributedTaskServiceServer) testEmbeddedByValue() {}

// UnsafeDistributedTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedTaskServiceServer will
// result in compilation errors.
type UnsafeDistributedTaskServiceServer interface {
	mustEmbedUnimplementedDistributedTaskServiceServer()
}

func RegisterDistributedTaskServiceServer(s grpc.ServiceRegistrar, srv DistributedTaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedDistributedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DistributedTaskService_ServiceDesc, srv)
}

func _DistributedTaskService_SubmitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedTaskServiceServer).SubmitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedTaskService_SubmitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedTaskServiceServer).SubmitTask(ctx, req.(*SubmitTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedTaskService_WatchTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DistributedTaskServiceServer).WatchTasks(m, &grpc.GenericServerStream[WatchTasksRequest, WatchTasksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DistributedTaskService_WatchTasksServer = grpc.ServerStreamingServer[WatchTasksResponse]

func _DistributedTaskService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedTaskServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedTaskService_CancelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedTaskServiceServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedTaskService_ServiceDesc is the grpc.ServiceDesc for DistributedTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dist.v1.DistributedTaskService",
	HandlerType: (*DistributedTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTask",
			Handler:    _DistributedTaskService_SubmitTask_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _DistributedTaskService_CancelTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTasks",
			Handler:       _DistributedTaskService_WatchTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dist/v1/task.proto",
}
