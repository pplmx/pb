// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: dist/v1/common.proto

package distv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible states of a computational node
type Node_NodeStatus int32

const (
	Node_NODE_STATUS_UNSPECIFIED Node_NodeStatus = 0
	Node_NODE_STATUS_ACTIVE      Node_NodeStatus = 1
	Node_NODE_STATUS_INACTIVE    Node_NodeStatus = 2
	Node_NODE_STATUS_OVERLOADED  Node_NodeStatus = 3
)

// Enum value maps for Node_NodeStatus.
var (
	Node_NodeStatus_name = map[int32]string{
		0: "NODE_STATUS_UNSPECIFIED",
		1: "NODE_STATUS_ACTIVE",
		2: "NODE_STATUS_INACTIVE",
		3: "NODE_STATUS_OVERLOADED",
	}
	Node_NodeStatus_value = map[string]int32{
		"NODE_STATUS_UNSPECIFIED": 0,
		"NODE_STATUS_ACTIVE":      1,
		"NODE_STATUS_INACTIVE":    2,
		"NODE_STATUS_OVERLOADED":  3,
	}
)

func (x Node_NodeStatus) Enum() *Node_NodeStatus {
	p := new(Node_NodeStatus)
	*p = x
	return p
}

func (x Node_NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dist_v1_common_proto_enumTypes[0].Descriptor()
}

func (Node_NodeStatus) Type() protoreflect.EnumType {
	return &file_dist_v1_common_proto_enumTypes[0]
}

func (x Node_NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_NodeStatus.Descriptor instead.
func (Node_NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{0, 0}
}

// Possible task types
type Task_TaskType int32

const (
	Task_TASK_TYPE_UNSPECIFIED      Task_TaskType = 0
	Task_TASK_TYPE_COMPUTE          Task_TaskType = 1
	Task_TASK_TYPE_DATA_PROCESSING  Task_TaskType = 2
	Task_TASK_TYPE_MACHINE_LEARNING Task_TaskType = 3
)

// Enum value maps for Task_TaskType.
var (
	Task_TaskType_name = map[int32]string{
		0: "TASK_TYPE_UNSPECIFIED",
		1: "TASK_TYPE_COMPUTE",
		2: "TASK_TYPE_DATA_PROCESSING",
		3: "TASK_TYPE_MACHINE_LEARNING",
	}
	Task_TaskType_value = map[string]int32{
		"TASK_TYPE_UNSPECIFIED":      0,
		"TASK_TYPE_COMPUTE":          1,
		"TASK_TYPE_DATA_PROCESSING":  2,
		"TASK_TYPE_MACHINE_LEARNING": 3,
	}
)

func (x Task_TaskType) Enum() *Task_TaskType {
	p := new(Task_TaskType)
	*p = x
	return p
}

func (x Task_TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_dist_v1_common_proto_enumTypes[1].Descriptor()
}

func (Task_TaskType) Type() protoreflect.EnumType {
	return &file_dist_v1_common_proto_enumTypes[1]
}

func (x Task_TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_TaskType.Descriptor instead.
func (Task_TaskType) EnumDescriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{1, 0}
}

// Possible task statuses
type Task_TaskStatus int32

const (
	Task_TASK_STATUS_UNSPECIFIED Task_TaskStatus = 0
	Task_TASK_STATUS_PENDING     Task_TaskStatus = 1
	Task_TASK_STATUS_RUNNING     Task_TaskStatus = 2
	Task_TASK_STATUS_COMPLETED   Task_TaskStatus = 3
	Task_TASK_STATUS_FAILED      Task_TaskStatus = 4
	Task_TASK_STATUS_CANCELED    Task_TaskStatus = 5
)

// Enum value maps for Task_TaskStatus.
var (
	Task_TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNSPECIFIED",
		1: "TASK_STATUS_PENDING",
		2: "TASK_STATUS_RUNNING",
		3: "TASK_STATUS_COMPLETED",
		4: "TASK_STATUS_FAILED",
		5: "TASK_STATUS_CANCELED",
	}
	Task_TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNSPECIFIED": 0,
		"TASK_STATUS_PENDING":     1,
		"TASK_STATUS_RUNNING":     2,
		"TASK_STATUS_COMPLETED":   3,
		"TASK_STATUS_FAILED":      4,
		"TASK_STATUS_CANCELED":    5,
	}
)

func (x Task_TaskStatus) Enum() *Task_TaskStatus {
	p := new(Task_TaskStatus)
	*p = x
	return p
}

func (x Task_TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dist_v1_common_proto_enumTypes[2].Descriptor()
}

func (Task_TaskStatus) Type() protoreflect.EnumType {
	return &file_dist_v1_common_proto_enumTypes[2]
}

func (x Task_TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_TaskStatus.Descriptor instead.
func (Task_TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{1, 1}
}

// Represents a computational node in the distributed system
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       // Unique identifier for the node
	Name    string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // Human-readable name of the node
	Address string          `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`                             // IP address or hostname
	Port    uint32          `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`                                  // Port number for communication
	Status  Node_NodeStatus `protobuf:"varint,5,opt,name=status,proto3,enum=dist.v1.Node_NodeStatus" json:"status,omitempty"` // Current status of the node
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_dist_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_dist_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Node) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Node) GetStatus() Node_NodeStatus {
	if x != nil {
		return x.Status
	}
	return Node_NODE_STATUS_UNSPECIFIED
}

// Represents a distributed task
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       // Unique task identifier
	Name    string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // Task name
	Type    Task_TaskType   `protobuf:"varint,3,opt,name=type,proto3,enum=dist.v1.Task_TaskType" json:"type,omitempty"`       // Type of task
	Status  Task_TaskStatus `protobuf:"varint,4,opt,name=status,proto3,enum=dist.v1.Task_TaskStatus" json:"status,omitempty"` // Current task status
	Payload []byte          `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`                             // Serialized task data
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_dist_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_dist_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetType() Task_TaskType {
	if x != nil {
		return x.Type
	}
	return Task_TASK_TYPE_UNSPECIFIED
}

func (x *Task) GetStatus() Task_TaskStatus {
	if x != nil {
		return x.Status
	}
	return Task_TASK_STATUS_UNSPECIFIED
}

func (x *Task) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Common event messages
type NodeStatusChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node           *Node           `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	PreviousStatus Node_NodeStatus `protobuf:"varint,2,opt,name=previous_status,json=previousStatus,proto3,enum=dist.v1.Node_NodeStatus" json:"previous_status,omitempty"`
	CurrentStatus  Node_NodeStatus `protobuf:"varint,3,opt,name=current_status,json=currentStatus,proto3,enum=dist.v1.Node_NodeStatus" json:"current_status,omitempty"`
}

func (x *NodeStatusChangeEvent) Reset() {
	*x = NodeStatusChangeEvent{}
	mi := &file_dist_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStatusChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusChangeEvent) ProtoMessage() {}

func (x *NodeStatusChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dist_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusChangeEvent.ProtoReflect.Descriptor instead.
func (*NodeStatusChangeEvent) Descriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *NodeStatusChangeEvent) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeStatusChangeEvent) GetPreviousStatus() Node_NodeStatus {
	if x != nil {
		return x.PreviousStatus
	}
	return Node_NODE_STATUS_UNSPECIFIED
}

func (x *NodeStatusChangeEvent) GetCurrentStatus() Node_NodeStatus {
	if x != nil {
		return x.CurrentStatus
	}
	return Node_NODE_STATUS_UNSPECIFIED
}

type ShutdownEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ShutdownEvent) Reset() {
	*x = ShutdownEvent{}
	mi := &file_dist_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownEvent) ProtoMessage() {}

func (x *ShutdownEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dist_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownEvent.ProtoReflect.Descriptor instead.
func (*ShutdownEvent) Descriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *ShutdownEvent) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ShutdownEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TaskStatusChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task           *Task           `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	PreviousStatus Task_TaskStatus `protobuf:"varint,2,opt,name=previous_status,json=previousStatus,proto3,enum=dist.v1.Task_TaskStatus" json:"previous_status,omitempty"`
	CurrentStatus  Task_TaskStatus `protobuf:"varint,3,opt,name=current_status,json=currentStatus,proto3,enum=dist.v1.Task_TaskStatus" json:"current_status,omitempty"`
}

func (x *TaskStatusChangeEvent) Reset() {
	*x = TaskStatusChangeEvent{}
	mi := &file_dist_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusChangeEvent) ProtoMessage() {}

func (x *TaskStatusChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dist_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusChangeEvent.ProtoReflect.Descriptor instead.
func (*TaskStatusChangeEvent) Descriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *TaskStatusChangeEvent) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskStatusChangeEvent) GetPreviousStatus() Task_TaskStatus {
	if x != nil {
		return x.PreviousStatus
	}
	return Task_TASK_STATUS_UNSPECIFIED
}

func (x *TaskStatusChangeEvent) GetCurrentStatus() Task_TaskStatus {
	if x != nil {
		return x.CurrentStatus
	}
	return Task_TASK_STATUS_UNSPECIFIED
}

type TaskAssignmentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task           *Task  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	AssignedNodeId string `protobuf:"bytes,2,opt,name=assigned_node_id,json=assignedNodeId,proto3" json:"assigned_node_id,omitempty"`
}

func (x *TaskAssignmentEvent) Reset() {
	*x = TaskAssignmentEvent{}
	mi := &file_dist_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignmentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignmentEvent) ProtoMessage() {}

func (x *TaskAssignmentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dist_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignmentEvent.ProtoReflect.Descriptor instead.
func (*TaskAssignmentEvent) Descriptor() ([]byte, []int) {
	return file_dist_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *TaskAssignmentEvent) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskAssignmentEvent) GetAssignedNodeId() string {
	if x != nil {
		return x.AssignedNodeId
	}
	return ""
}

var File_dist_v1_common_proto protoreflect.FileDescriptor

var file_dist_v1_common_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x64, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x22,
	0x83, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0xca, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x64, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7b, 0x0a, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x41, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x64, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x64, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x42, 0x7b, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x70, 0x6c, 0x6d, 0x78, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x69,
	0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x69, 0x73, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x44,
	0x58, 0x58, 0xaa, 0x02, 0x07, 0x44, 0x69, 0x73, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x44,
	0x69, 0x73, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13, 0x44, 0x69, 0x73, 0x74, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x44,
	0x69, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dist_v1_common_proto_rawDescOnce sync.Once
	file_dist_v1_common_proto_rawDescData = file_dist_v1_common_proto_rawDesc
)

func file_dist_v1_common_proto_rawDescGZIP() []byte {
	file_dist_v1_common_proto_rawDescOnce.Do(func() {
		file_dist_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_dist_v1_common_proto_rawDescData)
	})
	return file_dist_v1_common_proto_rawDescData
}

var file_dist_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dist_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_dist_v1_common_proto_goTypes = []any{
	(Node_NodeStatus)(0),          // 0: dist.v1.Node.NodeStatus
	(Task_TaskType)(0),            // 1: dist.v1.Task.TaskType
	(Task_TaskStatus)(0),          // 2: dist.v1.Task.TaskStatus
	(*Node)(nil),                  // 3: dist.v1.Node
	(*Task)(nil),                  // 4: dist.v1.Task
	(*NodeStatusChangeEvent)(nil), // 5: dist.v1.NodeStatusChangeEvent
	(*ShutdownEvent)(nil),         // 6: dist.v1.ShutdownEvent
	(*TaskStatusChangeEvent)(nil), // 7: dist.v1.TaskStatusChangeEvent
	(*TaskAssignmentEvent)(nil),   // 8: dist.v1.TaskAssignmentEvent
}
var file_dist_v1_common_proto_depIdxs = []int32{
	0,  // 0: dist.v1.Node.status:type_name -> dist.v1.Node.NodeStatus
	1,  // 1: dist.v1.Task.type:type_name -> dist.v1.Task.TaskType
	2,  // 2: dist.v1.Task.status:type_name -> dist.v1.Task.TaskStatus
	3,  // 3: dist.v1.NodeStatusChangeEvent.node:type_name -> dist.v1.Node
	0,  // 4: dist.v1.NodeStatusChangeEvent.previous_status:type_name -> dist.v1.Node.NodeStatus
	0,  // 5: dist.v1.NodeStatusChangeEvent.current_status:type_name -> dist.v1.Node.NodeStatus
	4,  // 6: dist.v1.TaskStatusChangeEvent.task:type_name -> dist.v1.Task
	2,  // 7: dist.v1.TaskStatusChangeEvent.previous_status:type_name -> dist.v1.Task.TaskStatus
	2,  // 8: dist.v1.TaskStatusChangeEvent.current_status:type_name -> dist.v1.Task.TaskStatus
	4,  // 9: dist.v1.TaskAssignmentEvent.task:type_name -> dist.v1.Task
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_dist_v1_common_proto_init() }
func file_dist_v1_common_proto_init() {
	if File_dist_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dist_v1_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dist_v1_common_proto_goTypes,
		DependencyIndexes: file_dist_v1_common_proto_depIdxs,
		EnumInfos:         file_dist_v1_common_proto_enumTypes,
		MessageInfos:      file_dist_v1_common_proto_msgTypes,
	}.Build()
	File_dist_v1_common_proto = out.File
	file_dist_v1_common_proto_rawDesc = nil
	file_dist_v1_common_proto_goTypes = nil
	file_dist_v1_common_proto_depIdxs = nil
}
