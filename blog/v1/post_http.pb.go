// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: blog/v1/post.proto

package blogv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPostServiceCreatePost = "/blog.v1.PostService/CreatePost"
const OperationPostServiceDeletePost = "/blog.v1.PostService/DeletePost"
const OperationPostServiceGetPostByID = "/blog.v1.PostService/GetPostByID"
const OperationPostServiceListPosts = "/blog.v1.PostService/ListPosts"
const OperationPostServiceUpdatePost = "/blog.v1.PostService/UpdatePost"

type PostServiceHTTPServer interface {
	// CreatePost 创建博客文章
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	// DeletePost 删除博客文章
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	// GetPostByID 根据ID获取博客文章
	GetPostByID(context.Context, *GetPostByIDRequest) (*GetPostByIDResponse, error)
	// ListPosts 列出所有博客文章
	ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error)
	// UpdatePost 更新博客文章
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
}

func RegisterPostServiceHTTPServer(s *http.Server, srv PostServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/posts", _PostService_CreatePost0_HTTP_Handler(srv))
	r.GET("/api/v1/posts/{id}", _PostService_GetPostByID0_HTTP_Handler(srv))
	r.GET("/api/v1/posts", _PostService_ListPosts0_HTTP_Handler(srv))
	r.PUT("/api/v1/posts/{id}", _PostService_UpdatePost0_HTTP_Handler(srv))
	r.DELETE("/api/v1/posts/{id}", _PostService_DeletePost0_HTTP_Handler(srv))
}

func _PostService_CreatePost0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceCreatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*CreatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePostResponse)
		return ctx.Result(200, reply)
	}
}

func _PostService_GetPostByID0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPostByIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceGetPostByID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPostByID(ctx, req.(*GetPostByIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPostByIDResponse)
		return ctx.Result(200, reply)
	}
}

func _PostService_ListPosts0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPostsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceListPosts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPosts(ctx, req.(*ListPostsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPostsResponse)
		return ctx.Result(200, reply)
	}
}

func _PostService_UpdatePost0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceUpdatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePost(ctx, req.(*UpdatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePostResponse)
		return ctx.Result(200, reply)
	}
}

func _PostService_DeletePost0_HTTP_Handler(srv PostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostServiceDeletePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePost(ctx, req.(*DeletePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePostResponse)
		return ctx.Result(200, reply)
	}
}

type PostServiceHTTPClient interface {
	CreatePost(ctx context.Context, req *CreatePostRequest, opts ...http.CallOption) (rsp *CreatePostResponse, err error)
	DeletePost(ctx context.Context, req *DeletePostRequest, opts ...http.CallOption) (rsp *DeletePostResponse, err error)
	GetPostByID(ctx context.Context, req *GetPostByIDRequest, opts ...http.CallOption) (rsp *GetPostByIDResponse, err error)
	ListPosts(ctx context.Context, req *ListPostsRequest, opts ...http.CallOption) (rsp *ListPostsResponse, err error)
	UpdatePost(ctx context.Context, req *UpdatePostRequest, opts ...http.CallOption) (rsp *UpdatePostResponse, err error)
}

type PostServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPostServiceHTTPClient(client *http.Client) PostServiceHTTPClient {
	return &PostServiceHTTPClientImpl{client}
}

func (c *PostServiceHTTPClientImpl) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...http.CallOption) (*CreatePostResponse, error) {
	var out CreatePostResponse
	pattern := "/api/v1/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPostServiceCreatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PostServiceHTTPClientImpl) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...http.CallOption) (*DeletePostResponse, error) {
	var out DeletePostResponse
	pattern := "/api/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostServiceDeletePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PostServiceHTTPClientImpl) GetPostByID(ctx context.Context, in *GetPostByIDRequest, opts ...http.CallOption) (*GetPostByIDResponse, error) {
	var out GetPostByIDResponse
	pattern := "/api/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostServiceGetPostByID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PostServiceHTTPClientImpl) ListPosts(ctx context.Context, in *ListPostsRequest, opts ...http.CallOption) (*ListPostsResponse, error) {
	var out ListPostsResponse
	pattern := "/api/v1/posts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPostServiceListPosts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PostServiceHTTPClientImpl) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...http.CallOption) (*UpdatePostResponse, error) {
	var out UpdatePostResponse
	pattern := "/api/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPostServiceUpdatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
